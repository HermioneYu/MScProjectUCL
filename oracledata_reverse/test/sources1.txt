"The ""mouse clicked"" event. This MouseEvent occurs when a mouse button is pressed and released."
Returns an AnnotatedType object that represents the use of a type to specify the type of the formal parameter represented by this Parameter.
Returns the float value of this Float object.
Returns the samples for a specified band for the specified rectangle of pixels in a float array, one sample per array element. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.
Constructs a Rectangle2D of the appropriate precision to hold the parameters calculated to be the framing rectangle of this arc.
Rounding mode to round towards negative infinity. If the BigDecimal is positive, behave as for ROUND_DOWN; if negative, behave as for ROUND_UP. Note that this rounding mode never increases the calculated value.
Constructs a NumberFormatException with the specified detail message.
An alias for ISO_C7.
Returns the version of the protocol this cookie complies with. Version 1 complies with RFC 2965/2109, and version 0 complies with the original cookie specification drafted by Netscape. Cookies provided by a browser use and identify the browser's cookie version.
The MediaType instance for ISO/DIN C6, 114 x 162 mm.
Reads a character from this file. This method reads two bytes from the file, starting at the current file pointer. If the bytes read, in order, are b1 and b2, where 0 <= b1, b2 <= 255, then the result is equal to: (char)((b1 << 8) | b2) This method blocks until the two bytes are read, the end of the stream is detected, or an exception is thrown.
An alias for NA_NUMBER_10_ENVELOPE.
Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point. All coordinates are specified in float precision. This method provides a single precision variant of the double precision quadTo() method on the base Path2D class.
Returns the correctly rounded positive square root of a double value. Special cases: If the argument is NaN or less than zero, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is the same as the argument. Otherwise, the result is the double value closest to the true mathematical square root of the argument value.
When flip contents are COPIED, the contents of the back buffer are copied to the front buffer when flipping.
Constructs a new RoundRectangle2D, initialized to location (0.0, 0.0), size (0.0, 0.0), and corner arcs of radius 0.0.
Produces a method handle giving read access to a static field. The type of the method handle will have a return type of the field's value type. The method handle will take no arguments. Access checking is performed immediately on behalf of the lookup class. If the returned method handle is invoked, the field's class will be initialized, if it has not already been initialized.
Focuses the Component before aComponent, typically based on a FocusTraversalPolicy.
Returns whether or not alpha is supported in this ColorModel.
Sets this transform to a rotation transformation that rotates coordinates around an anchor point according to a rotation vector. All coordinates rotate about the specified anchor coordinates by the same amount. The amount of rotation is such that coordinates along the former positive X axis will subsequently align with the vector pointing from the origin to the specified vector coordinates. If both vecx and vecy are 0.0, the transform is set to an identity transform. This operation is equivalent to calling: setToTranslation(Math.atan2(vecy, vecx), anchorx, anchory);
Invoked when a component gains the keyboard focus.
Determines where the specified coordinates lie with respect to this Rectangle2D. This method computes a binary OR of the appropriate mask values indicating, for each side of this Rectangle2D, whether or not the specified coordinates are on the same side of the edge as the rest of this Rectangle2D.
Returns the permanent focus owner, if the permanent focus owner is in the same context as the calling thread. The permanent focus owner is defined as the last Component in an application to receive a permanent FOCUS_GAINED event. The focus owner and permanent focus owner are equivalent unless a temporary focus change is currently in effect. In such a situation, the permanent focus owner will again be the focus owner when the temporary focus change ends.
Put the component on the right side of its display area, centered vertically.
The component comes before the first line of the layout's content. For Western, left-to-right and top-to-bottom orientations, this is equivalent to NORTH.
Moves this Rectangle to the specified location.
Put the value of the named int field into the persistent field.
Returns the stack trace of the thread associated with this ThreadInfo. If no stack trace was requested for this thread info, this method will return a zero-length array. If the returned array is of non-zero length then the first element of the array represents the top of the stack, which is the most recent method invocation in the sequence. The last element of the array represents the bottom of the stack, which is the least recent method invocation in the sequence. Some Java virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning the thread associated with this ThreadInfo is permitted to return a zero-length array from this method.
Enables or disables input method support for this text component. If input method support is enabled and the text component also processes key events, incoming events are offered to the current input method and will only be processed by the component or dispatched to its listeners if the input method does not consume them. Whether and how input method support for this text component is enabled or disabled by default is implementation dependent.
Gets the source as a reference of type BeanContextServices
"The set of warnings that are to be suppressed by the compiler in the annotated element. Duplicate names are permitted. The second and successive occurrences of a name are ignored. The presence of unrecognized warning names is not an error: Compilers must ignore any warning names they do not recognize. They are, however, free to emit a warning if an annotation contains an unrecognized warning name. The string ""unchecked"" is used to suppress unchecked warnings. Compiler vendors should document the additional warning names they support in conjunction with this annotation type. They are encouraged to cooperate to ensure that the same names work across multiple compilers."
"Returns a hexadecimal string representation of the double argument. All characters mentioned below are ASCII characters. If the argument is NaN, the result is the string ""NaN"". Otherwise, the result is a string that represents the sign and magnitude of the argument. If the sign is negative, the first character of the result is '-' ('\u002D'); if the sign is positive, no sign character appears in the result. As for the magnitude m: If m is infinity, it is represented by the string ""Infinity""; thus, positive infinity produces the result ""Infinity"" and negative infinity produces the result ""-Infinity"". If m is zero, it is represented by the string ""0x0.0p0""; thus, negative zero produces the result ""-0x0.0p0"" and positive zero produces the result ""0x0.0p0"". If m is a double value with a normalized representation, substrings are used to represent the significand and exponent fields. The significand is represented by the characters ""0x1."" followed by a lowercase hexadecimal representation of the rest of the significand as a fraction. Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by ""p"" followed by a decimal string of the unbiased exponent as if produced by a call to Integer.toString on the exponent value. If m is a double value with a subnormal representation, the significand is represented by the characters ""0x0."" followed by a hexadecimal representation of the rest of the significand as a fraction. Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by ""p-1022"". Note that there must be at least one nonzero digit in a subnormal significand. Examples Floating-point ValueHexadecimal String 1.0 0x1.0p0 -1.0 -0x1.0p0 2.0 0x1.0p1 3.0 0x1.8p1 0.5 0x1.0p-1 0.25 0x1.0p-2 Double.MAX_VALUE 0x1.fffffffffffffp1023 Minimum Normal Value 0x1.0p-1022 Maximum Subnormal Value 0x0.fffffffffffffp-1022 Double.MIN_VALUE 0x0.0000000000001p-1022"
Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group, and has the specified stack size. This constructor is identical to Thread(ThreadGroup,Runnable,String) with the exception of the fact that it allows the thread stack size to be specified. The stack size is the approximate number of bytes of address space that the virtual machine is to allocate for this thread's stack. The effect of the stackSize parameter, if any, is highly platform dependent. On some platforms, specifying a higher value for the stackSize parameter may allow a thread to achieve greater recursion depth before throwing a StackOverflowError. Similarly, specifying a lower value may allow a greater number of threads to exist concurrently without throwing an OutOfMemoryError (or other internal error). The details of the relationship between the value of the stackSize parameter and the maximum recursion depth and concurrency level are platform-dependent. On some platforms, the value of the stackSize parameter may have no effect whatsoever. The virtual machine is free to treat the stackSize parameter as a suggestion. If the specified value is unreasonably low for the platform, the virtual machine may instead use some platform-specific minimum value; if the specified value is unreasonably high, the virtual machine may instead use some platform-specific maximum. Likewise, the virtual machine is free to round the specified value up or down as it sees fit (or to ignore it completely). Specifying a value of zero for the stackSize parameter will cause this constructor to behave exactly like the Thread(ThreadGroup, Runnable, String) constructor. Due to the platform-dependent nature of the behavior of this constructor, extreme care should be exercised in its use. The thread stack size necessary to perform a given computation will likely vary from one JRE implementation to another. In light of this variation, careful tuning of the stack size parameter may be required, and the tuning may need to be repeated for each JRE implementation on which an application is to run. Implementation note: Java platform implementers are encouraged to document their implementation's behavior with respect to the stackSize parameter.
Returns the smaller of two float values as if by calling Math.min.
This method initiates a focus traversal operation if and only if the KeyEvent represents a focus traversal key for the specified focusedComponent. It is expected that focusedComponent is the current focus owner, although this need not be the case. If it is not, focus traversal will nevertheless proceed as if focusedComponent were the current focus owner.
Returns a hash code value for this PageAttributes.
Writes an int to the file as four bytes, high byte first. The write starts at the current position of the file pointer.
Sets the location of the point to the specified location. This method is included for completeness, to parallel the setLocation method of Component.
Handles the componentMoved event by invoking the componentMoved methods on listener-a and listener-b.
Indicates that a component's orientation has not been set. To preserve the behavior of existing applications, isLeftToRight will return true for this value.
Request the PixelGrabber to abort the image fetch.
Consumes this event, if this event can be consumed. Only low-level, system events can be consumed
Blocks the execution of the current thread and enters a new secondary event loop on the event dispatch thread. This method can be called by any thread including the event dispatch thread. This thread will be blocked until the exit() method is called or the loop is terminated. A new secondary loop will be created on the event dispatch thread for dispatching events in either case. This method can only start one new event loop at a time per object. If a secondary event loop has already been started by this object and is currently still running, this method returns false to indicate that it was not successful in starting a new event loop. Otherwise, this method blocks the calling thread and later returns true when the new event loop is terminated. At such time, this object can again be used to start another new event loop.
Returns the Throwable instance wrapped in this UndeclaredThrowableException, which may be null. This method predates the general-purpose exception chaining facility. The Throwable.getCause() method is now the preferred means of obtaining this information.
Returns an iterator object that iterates along the Shape boundary and provides access to a flattened view of the Shape outline geometry. Only SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types are returned by the iterator. If an optional AffineTransform is specified, the coordinates returned in the iteration are transformed accordingly. The amount of subdivision of the curved segments is controlled by the flatness parameter, which specifies the maximum distance that any point on the unflattened transformed curve can deviate from the returned flattened path segments. Note that a limit on the accuracy of the flattened path might be silently imposed, causing very small flattening parameters to be treated as larger values. This limit, if there is one, is defined by the particular implementation that is used. Each call to this method returns a fresh PathIterator object that traverses the Shape object geometry independently from any other PathIterator objects in use at the same time. It is recommended, but not guaranteed, that objects implementing the Shape interface isolate iterations that are in process from any changes that might occur to the original object's geometry during such iterations.
Return an informative string for the name of this type.
"Returns a PointerInfo instance that represents the current location of the mouse pointer. The GraphicsDevice stored in this PointerInfo contains the mouse pointer. The coordinate system used for the mouse position depends on whether or not the GraphicsDevice is part of a virtual screen device. For virtual screen devices, the coordinates are given in the virtual coordinate system, otherwise they are returned in the coordinate system of the GraphicsDevice. See GraphicsConfiguration for more information about the virtual screen devices. On systems without a mouse, returns null. If there is a security manager, its checkPermission method is called with an AWTPermission(""watchMousePointer"") permission before creating and returning a PointerInfo object. This may result in a SecurityException."
Returns the height of the framing rectangle in double precision.
Constructs an AreaAveragingScaleFilter that scales the pixels from its source Image as specified by the width and height parameters.
"Constant for the ""Lao"" Unicode character block."
Returns the scale factors in the given array. The array is also returned for convenience. If scaleFactors is null, a new array will be allocated.
Returns the requested data array element from the specified bank as a float.
Returns the simple name of the underlying member or constructor represented by this Member.
If the current token is a number, this field contains the value of that number. The current token is a number when the value of the ttype field is TT_NUMBER. The initial value of this field is 0.0.
Sets the filename filter for this file dialog window to the specified filter. Filename filters do not function in Sun's reference implementation for Microsoft Windows.
The number of instances of a serializable BeanContextServceProvider.
Determine if the delivered int pixels intersect the region to be extracted and pass through only that subset of pixels that appear in the output region. Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being filtered. Developers using this class to filter pixels from an image should avoid calling this method directly since that operation could interfere with the filtering operation.
Returns true if this Component is the focus owner. This method is obsolete, and has been replaced by isFocusOwner().
Returns an iterator object that iterates along the boundary of the Shape and provides access to the geometry of the outline of the Shape. Only SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types are returned by the iterator. Since polygons are already flat, the flatness parameter is ignored. An optional AffineTransform can be specified in which case the coordinates returned in the iteration are transformed accordingly.
Gets the BeanContext associated with this BeanContextChild.
Returns the flatness of this curve. The flatness is the maximum distance of a control point from the line connecting the end points.
The maximum amount by which the left side of this glyph can grow.
"Method used by subclasses to override the default writeObject method. This method is called by trusted subclasses of ObjectInputStream that constructed ObjectInputStream using the protected no-arg constructor. The subclass is expected to provide an override method with the modifier ""final""."
Reports a bound property change.
Constructs a solid BasicStroke with the specified attributes. The miterlimit parameter is unnecessary in cases where the default is allowable or the line joins are not specified as JOIN_MITER.
Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.
Handles the itemStateChanged event by invoking the itemStateChanged methods on listener-a and listener-b.
Constructs an initially invisible Dialog with the specified owner Frame and modality and an empty title.
Defines a package by name in this ClassLoader. This allows class loaders to define the packages for their classes. Packages must be created before the class is defined, and package names must be unique within a class loader and cannot be redefined or changed once created.
Returns the value of this Double as a short after a narrowing primitive conversion.
Specifies the handling of multiple copies, including collation, for jobs using these attributes. Not specifying this attribute is equivalent to specifying MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES.
Returns a vector of RenderableImages that are the sources of image data for this RenderableImage. Note that this method may return an empty vector, to indicate that the image has no sources, or null, to indicate that no information is available.
Constructs an ICC_Profile corresponding to the data in an InputStream. This method throws an IllegalArgumentException if the stream does not contain valid ICC Profile data. It throws an IOException if an I/O error occurs while reading the stream.
Computes an arbitrary rectangular region of the BufferedImage and copies it into a specified WritableRaster. The region to be computed is determined from the bounds of the specified WritableRaster. The specified WritableRaster must have a SampleModel that is compatible with this image. If outRaster is null, an appropriate WritableRaster is created.
Constant for the default highlight for selected raw text.
Returns a string representing the state of this Label. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.
Determines if the specified character may be part of a Java identifier as other than the first character. A character may be part of a Java identifier if any of the following are true: it is a letter it is a currency symbol (such as '$') it is a connecting punctuation character (such as '_') it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for the character Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isJavaIdentifierPart(int) method.
Selects all the text in this text component.
Returns the requested data array element from the first (default) bank as a double.
Returns the current position of this LineBreakMeasurer.
Moves the focus up one focus traversal cycle from the current focus owner. Typically, the new focus owner is set to the current focus owner's focus cycle root, and the current focus cycle root is set to the new focus owner's focus cycle root. If, however, the current focus owner's focus cycle root is a Window, then typically the focus owner is set to the focus cycle root's default Component to focus, and the current focus cycle root is unchanged.
Creates a new weak reference that refers to the given object and is registered with the given queue.
Creates a grid layout with a default of one column per component, in a single row.
"Instantiate a bean. The bean is created based on a name relative to a class-loader. This name should be a dot-separated name such as ""a.b.c"". In Beans 1.0 the given name can indicate either a serialized object or a class. Other mechanisms may be added in the future. In beans 1.0 we first try to treat the beanName as a serialized object name then as a class name. When using the beanName as a serialized object name we convert the given beanName to a resource pathname and add a trailing "".ser"" suffix. We then try to load a serialized object from that resource. For example, given a beanName of ""x.y"", Beans.instantiate would first try to read a serialized object from the resource ""x/y.ser"" and if that failed it would try to load the class ""x.y"" and create an instance of that class. If the bean is a subtype of java.applet.Applet, then it is given some special initialization. First, it is supplied with a default AppletStub and AppletContext. Second, if it was instantiated from a classname the applet's ""init"" method is called. (If the bean was deserialized this step is skipped.) Note that for beans which are applets, it is the caller's responsiblity to call ""start"" on the applet. For correct behaviour, this should be done after the applet has been added into a visible AWT container. Note that applets created via beans.instantiate run in a slightly different environment than applets running inside browsers. In particular, bean applets have no access to ""parameters"", so they may wish to provide property get/set methods to set parameter values. We advise bean-applet developers to test their bean-applets against both the JDK appletviewer (for a reference browser environment) and the BDK BeanBox (for a reference bean container)."
Returns the samples for a specified pixel in an int array, one sample per array element. ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds.
Sets the number of copies the application should render for jobs using these attributes to the default. The default number of copies is 1.
Releases all of the native screen resources used by this Window, its subcomponents, and all of its owned children. That is, the resources for these Components will be destroyed, any memory they consume will be returned to the OS, and they will be marked as undisplayable. The Window and its subcomponents can be made displayable again by rebuilding the native resources with a subsequent call to pack or show. The states of the recreated Window and its subcomponents will be identical to the states of these objects at the point where the Window was disposed (not accounting for additional modifications between those actions). Note: When the last displayable window within the Java virtual machine (VM) is disposed of, the VM may terminate. See AWT Threading Issues for more information.
Returns the ColorModel.
Launches the associated editor application and opens a file for editing.
Returns the cause of this error (the exception that occurred during a static initialization that caused this error to be created).
Returns the largest X coordinate of the framing rectangle of the Shape in double precision.
Returns the number of tiles in the y direction. This is always one.
Constructs a new reference-object queue.
The color rendered for the text of inactive items, such as in menus.
The array index for the windowText system color.
"Rounding mode to round towards ""nearest neighbor"" unless both neighbors are equidistant, in which case round up. Behaves as for RoundingMode.UP if the discarded fraction is ≥ 0.5; otherwise, behaves as for RoundingMode.DOWN. Note that this is the rounding mode commonly taught at school. Example: Rounding mode HALF_UP Examples Input Number Input rounded to one digit with HALF_UP rounding 5.5 6 2.5 3 1.6 2 1.1 1 1.0 1 -1.0 -1 -1.1 -1 -1.6 -2 -2.5 -3 -5.5 -6"
The maximum value of a Unicode high-surrogate code unit in the UTF-16 encoding, constant '\uDBFF'. A high-surrogate is also known as a leading-surrogate.
Retrieve the object used to buffer persistent fields to be written to the stream. The fields will be written to the stream when writeFields method is called.
Constructs a new exception with null as its detail message. The cause is not initialized, and may subsequently be initialized by a call to Throwable.initCause(java.lang.Throwable).
Constructs a DragGestureEvent object given by the DragGestureRecognizer instance firing this event, an act parameter representing the user's preferred action, an ori parameter indicating the origin of the drag, and a List of events that comprise the gesture(evs parameter).
Profile class is abstract.
"Neutral bidirectional character type ""ON"" in the Unicode specification."
The MediaType instance for ISO/DIN B0, 1000 x 1414 mm.
Returns the absolute value of a double value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases: If the argument is positive zero or negative zero, the result is positive zero. If the argument is infinite, the result is positive infinity. If the argument is NaN, the result is NaN. In other words, the result is the same as the value of the expression: Double.longBitsToDouble((Double.doubleToLongBits(a)<<1)>>>1)
Transforms the source Raster and stores the results in the destination Raster. This operation performs the transform band by band. If the destination Raster is null, a new Raster is created. An IllegalArgumentException may be thrown if the source is the same as the destination or if the number of bands in the source is not equal to the number of bands in the destination. The coordinates of the rectangle returned by getBounds2D(Raster) are not necessarily the same as the coordinates of the WritableRaster returned by this method. If the upper-left corner coordinates of rectangle are negative then this part of the rectangle is not drawn. If the coordinates of the rectangle are positive then the filtered image is drawn at that position in the destination Raster.
Writes a char to the file as a two-byte value, high byte first. The write starts at the current position of the file pointer.
Returns the Component at the top of the hierarchy which was changed.
Changes the splash screen image. The new image is loaded from the specified URL; GIF, JPEG and PNG image formats are supported. The method returns after the image has finished loading and the window has been updated. The splash screen window is resized according to the size of the image and is centered on the screen.
Constructs a new Ellipse2D, initialized to location (0, 0) and size (0, 0).
Returns true if the specified object is a valid value for this Key.
"Horizontal device metrics. Table tag ""hdmx"" in the Open Type Specification."
The color rendered for the background of selected items, such as in menus, comboboxes, and text.
Determines if the specified character is permissible as the first character in a Java identifier. A character may start a Java identifier if and only if one of the following is true: isLetter(ch) returns true getType(ch) returns LETTER_NUMBER ch is a currency symbol (such as '$') ch is a connecting punctuation character (such as '_').
Returns a BigDecimal whose value is (thisn). The current implementation uses the core algorithm defined in ANSI standard X3.274-1996 with rounding according to the context settings. In general, the returned numerical value is within two ulps of the exact numerical value for the chosen precision. Note that future releases may use a different algorithm with a decreased allowable error bound and increased allowable exponent range. The X3.274-1996 algorithm is: An ArithmeticException exception is thrown if abs(n) > 999999999 mc.precision == 0 and n < 0 mc.precision > 0 and n has more than mc.precision decimal digits if n is zero, ONE is returned even if this is zero, otherwise if n is positive, the result is calculated via the repeated squaring technique into a single accumulator. The individual multiplications with the accumulator use the same math context settings as in mc except for a precision increased to mc.precision + elength + 1 where elength is the number of decimal digits in n. if n is negative, the result is calculated as if n were positive; this value is then divided into one using the working precision specified above. The final value from either the positive or negative case is then rounded to the destination precision.
ICC Profile Color Space Type Signature: '2CLR'.
Returns the array representing the lengths of the dash segments. Alternate entries in the array represent the user space lengths of the opaque and transparent segments of the dashes. As the pen moves along the outline of the Shape to be stroked, the user space distance that the pen travels is accumulated. The distance value is used to index into the dash array. The pen is opaque when its current cumulative distance maps to an even element of the dash array and transparent otherwise.
Removes the characters in a substring of this sequence. The substring begins at the specified start and extends to the character at index end - 1 or to the end of the sequence if no such character exists. If start is equal to end, no changes are made.
"Controls whether the layout of Containers is validated dynamically during resizing, or statically, after resizing is complete. Use isDynamicLayoutActive() to detect if this feature enabled in this program and is supported by this operating system and/or window manager. Note that this feature is supported not on all platforms, and conversely, that this feature cannot be turned off on some platforms. On these platforms where dynamic layout during resizing is not supported (or is always supported), setting this property has no effect. Note that this feature can be set or unset as a property of the operating system or window manager on some platforms. On such platforms, the dynamic resize property must be set at the operating system or window manager level before this method can take effect. This method does not change support or settings of the underlying operating system or window manager. The OS/WM support can be queried using getDesktopProperty(""awt.dynamicLayoutSupported"") method."
"Constant for the ""Old South Arabian"" Unicode character block."
Returns the minimum dimensions needed to layout the visible components contained in the specified target container.
Returns the bounds of the glyph. This is the bounding box of the glyph outline. Because of rasterization and pixel alignment effects, it does not necessarily enclose the pixels that are affected when rendering the glyph.
"Justification. Table tag ""just"" in the Open Type Specification."
Constructs a WrongMethodTypeException with no detail message.
Writes two bytes to the output stream to represent the value of the argument. The byte values to be written, in the order shown, are: (byte)(0xff & (v >> 8)) (byte)(0xff & v) The bytes written by this method may be read by the readShort method of interface DataInput , which will then return a short equal to (short)v.
Constant for the F12 function key.
The number of DataBuffer data elements per pixel.
Sets the specified menu to be this menu bar's help menu. If this menu bar has an existing help menu, the old help menu is removed from the menu bar, and replaced with the specified menu.
Writes to the output stream the eight low-order bits of the argument b. The 24 high-order bits of b are ignored.
The origin is at the top right of the paper with x running top to bottom and y running right to left. Note that this is the Macintosh landscape.
Sets the location and size of this Rectangle2D to the specified float values.
Returns true if this Double value is a Not-a-Number (NaN), false otherwise.
Adds a Float to the list of parameters.
Returns the Accessible child, if one exists, contained at the local coordinate Point. Otherwise returns null.
The event mask for selecting item events.
Returns the location of the corresponding destination point given a point in the source image. If dstPt is specified, it is used to hold the return value.
Returns true if this is a whitespace glyph.
"Forces the thread to stop executing. If there is a security manager installed, its checkAccess method is called with this as its argument. This may result in a SecurityException being raised (in the current thread). If this thread is different from the current thread (that is, the current thread is trying to stop a thread other than itself), the security manager's checkPermission method (with a RuntimePermission(""stopThread"") argument) is called in addition. Again, this may result in throwing a SecurityException (in the current thread). The thread represented by this thread is forced to stop whatever it is doing abnormally and to throw a newly created ThreadDeath object as an exception. It is permitted to stop a thread that has not yet been started. If the thread is eventually started, it immediately terminates. An application should not normally try to catch ThreadDeath unless it must do some extraordinary cleanup operation (note that the throwing of ThreadDeath causes finally clauses of try statements to be executed before the thread officially dies). If a catch clause catches a ThreadDeath object, it is important to rethrow the object so that the thread actually dies. The top-level error handler that reacts to otherwise uncaught exceptions does not print out a message or otherwise notify the application if the uncaught exception is an instance of ThreadDeath."
HTTP Status-Code 412: Precondition Failed.
Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file. If a character has no explicit titlecase mapping and is not itself a titlecase char according to UnicodeData, then the uppercase mapping is returned as an equivalent titlecase mapping. If the character argument is already a titlecase character, the same character value will be returned. Note that Character.isTitleCase(Character.toTitleCase(codePoint)) does not always return true for some ranges of characters.
Creates a new strategy for multi-buffering on this component. Multi-buffering is useful for rendering performance. This method attempts to create the best strategy available with the number of buffers supplied. It will always create a BufferStrategy with that number of buffers. A page-flipping strategy is attempted first, then a blitting strategy using accelerated buffers. Finally, an unaccelerated blitting strategy is used. Each time this method is called, the existing buffer strategy for this component is discarded.
Returns the X coordinate of the second control point in double precision.
Allocates a new string that contains the sequence of characters currently contained in the string buffer argument. The contents of the string buffer are copied; subsequent modification of the string buffer does not affect the newly created string.
Returns the value of this Byte as a float after a widening primitive conversion.
Return true if the integer argument includes the synchronized modifier, false otherwise.
create an embedded autoscroller
Returns the square of the distance from a Point2D to this line segment. The distance measured is the distance between the specified point and the closest point between the current line's end points. If the specified point intersects the line segment in between the end points, this method returns 0.0.
Sets the framing rectangle of this Shape to be the specified Rectangle2D. The framing rectangle is used by the subclasses of RectangularShape to define their geometry.
Removes the specified popup menu from the component.
Gets the number of components in this panel. Note: This method should be called under AWT tree lock.
Returns the closest int to the argument, with ties rounding to positive infinity. Special cases: If the argument is NaN, the result is 0. If the argument is negative infinity or any value less than or equal to the value of Integer.MIN_VALUE, the result is equal to the value of Integer.MIN_VALUE. If the argument is positive infinity or any value greater than or equal to the value of Integer.MAX_VALUE, the result is equal to the value of Integer.MAX_VALUE.
Returns the unique FileChannel object associated with this file. The position of the returned channel will always be equal to this object's file-pointer offset as returned by the getFilePointer method. Changing this object's file-pointer offset, whether explicitly or by reading or writing bytes, will change the position of the channel, and vice versa. Changing the file's length via this object will change the length seen via the file channel, and vice versa.
Adds the specified action listener to receive ActionEvents from this TrayIcon. Action events usually occur when a user selects the tray icon, using either the mouse or keyboard. The conditions in which action events are generated are platform-dependent. Calling this method with a null value has no effect. Refer to AWT Threading Issues for details on AWT's threading model.
"Constant for the ""Sundanese"" Unicode character block."
Gets the system property indicated by the specified key. First, if there is a security manager, its checkPropertyAccess method is called with the key as its argument. This may result in a SecurityException. If there is no current set of system properties, a set of system properties is first created and initialized in the same manner as for the getProperties method.
Returns a float array containing all samples for a rectangle of pixels, one sample per array element. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.
The MediaType instance for ISO/DIN and JIS A8, 52 x 74 mm.
A direct method handle reference kind, as defined in the table above.
The color rendered for the border around the currently active window.
Returns the width of the framing rectangle in double precision.
Returns a boolean which indicates whether or not some form of antialiasing is specified by this FontRenderContext. Call getAntiAliasingHint() for the specific rendering hint value.
Constructs a PaintEvent object with the specified source component and type. This method throws an IllegalArgumentException if source is null.
Return a Shape that represents the region that this ShapeGraphicAttribute renders. This is used when a TextLayout is requested to return the outline of the text. The (untransformed) shape must not extend outside the rectangular bounds returned by getBounds.
Waits until all events currently on the event queue have been processed.
Sets the requested data array element in the specified bank to the given double.
Causes this piped reader to be connected to the piped writer src. If this object is already connected to some other piped writer, an IOException is thrown. If src is an unconnected piped writer and snk is an unconnected piped reader, they may be connected by either the call: snk.connect(src) or the call: src.connect(snk) The two calls have the same effect.
Adds the specified action listener to receive action events from this button. Action events occur when a user presses or releases the mouse over this button. If l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT's threading model.
Constructs an instance of NoninvertibleTransformException with the specified detail message.
Returns the width of the bounding Rectangle in double precision.
Calls dropActionChanged on the registered DropTargetListener and passes it the specified DropTargetDragEvent. Has no effect if this DropTarget is not active.
Returns the toolkit of this frame.
Creates a new XML encoder to write out JavaBeans to the stream out using the given charset starting from the given indentation.
Adds input-method-listener-a with input-method-listener-b and returns the resulting multicast listener.
Returns the LineMetrics object for the specified String in the specified Graphics context.
Returns the requested data array element from the specified bank as an int.
Handles the caretPositionChanged event by invoking the caretPositionChanged methods on listener-a and listener-b.
protected method called from constructor and readObject to initialize transient state of BeanContextSupport instance. This class uses this method to instantiate inner class listeners used to monitor PropertyChange and VetoableChange events on children. subclasses may envelope this method to add their own initialization behavior
See the general contract of the readUnsignedShort method of DataInput. Bytes for this operation are read from the contained input stream.
Returns the black box bounds of the characters in the specified range. The black box bounds is an area consisting of the union of the bounding boxes of all the glyphs corresponding to the characters between start and limit. This area can be disjoint.
The user has pressed a non-ASCII action key. The key field contains a value that indicates that the event occurred on one of the action keys, which comprise the 12 function keys, the arrow (cursor) keys, Page Up, Page Down, Home, End, Print Screen, Scroll Lock, Caps Lock, Num Lock, Pause, and Insert.
Returns a fragment of Java code that can be used to set a property to match the editors current state. This method is intended for use when generating Java code to reflect changes made through the property editor. The code fragment should be context free and must be a legal Java expression as specified by the JLS. Specifically, if the expression represents a computation then all classes and static members should be fully qualified. This rule applies to constructors, static methods and non primitive arguments. Caution should be used when evaluating the expression as it may throw exceptions. In particular, code generators must ensure that generated code will compile in the presence of an expression that can throw checked exceptions. Example results are: Primitive expresssion: 2 Class constructor: new java.awt.Color(127,127,34) Static field: java.awt.Color.orange Static method: javax.swing.Box.createRigidArea(new java.awt.Dimension(0, 5))
Read a single character. Line terminators are compressed into single newline ('\n') characters. Whenever a line terminator is read the current line number is incremented.
Constructs a LinearGradientPaint.
"Produces a method handle for a static method. The type of the method handle will be that of the method. (Since static methods do not take receivers, there is no additional receiver argument inserted into the method handle type, as there would be with findVirtual or findSpecial.) The method and all its argument types must be accessible to the lookup object. The returned method handle will have variable arity if and only if the method's variable arity modifier bit (0x0080) is set. If the returned method handle is invoked, the method's class will be initialized, if it has not already been initialized. Example: import static java.lang.invoke.MethodHandles.*; import static java.lang.invoke.MethodType.*; ... MethodHandle MH_asList = publicLookup().findStatic(Arrays.class, ""asList"", methodType(List.class, Object[].class)); assertEquals(""[x, y]"", MH_asList.invoke(""x"", ""y"").toString());"
The Print Screen key, a non-ASCII action key.
Sets all samples for a rectangle of pixels from an int array containing one sample per array element. ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds.
Returns the requested data array element from the specified bank as a double.
Returns a hashcode for this ShapeGraphicAttribute.
APPLICATION_EXCLUDE indicates that a top-level window won't be blocked by any application-modal dialogs. Also, it isn't blocked by document-modal dialogs from outside of its child hierarchy.
"Converts this BigDecimal to a long. This conversion is analogous to the narrowing primitive conversion from double to short as defined in section 5.1.3 of The Java™ Language Specification: any fractional part of this BigDecimal will be discarded, and if the resulting ""BigInteger"" is too big to fit in a long, only the low-order 64 bits are returned. Note that this conversion can lose information about the overall magnitude and precision of this BigDecimal value as well as return a result with the opposite sign."
Indicates whether this file dialog box is for loading from a file or for saving to a file.
Rounding mode to round towards zero. Never increments the digit prior to a discarded fraction (i.e., truncates). Note that this rounding mode never increases the magnitude of the calculated value. Example: Rounding mode DOWN Examples Input Number Input rounded to one digit with DOWN rounding 5.5 5 2.5 2 1.6 1 1.1 1 1.0 1 -1.0 -1 -1.1 -1 -1.6 -1 -2.5 -2 -5.5 -5
"Returns the absolute path name of a native library. The VM invokes this method to locate the native libraries that belong to classes loaded with this class loader. If this method returns null, the VM searches the library along the path specified as the ""java.library.path"" property."
The event mask for selecting mouse events.
Returns a string representation of the long argument as an unsigned integer in base 8. The unsigned long value is the argument plus 264 if the argument is negative; otherwise, it is equal to the argument. This value is converted to a string of ASCII digits in octal (base 8) with no extra leading 0s. The value of the argument can be recovered from the returned string s by calling Long.parseUnsignedLong(s, 8). If the unsigned magnitude is zero, it is represented by a single zero character '0' ('\u0030'); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as octal digits: 01234567 These are the characters '\u0030' through '\u0037'.
Validated image has been restored and is now ready to use. Note that restoration causes contents of the image to be lost.
A Stream Protocol Version. This protocol is written by JVM 1.2. Externalizable data is written in block data mode and is terminated with TC_ENDBLOCKDATA. Externalizable class descriptor flags has SC_BLOCK_DATA enabled. JVM 1.1.6 and greater can read this format change. Enables writing a nonSerializable class descriptor into the stream. The serialVersionUID of a nonSerializable class is set to 0L.
Returns the X coordinate of the end point in double precision.
Creates a new PrintWriter, without automatic line flushing, with the specified file. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will encode characters using the default charset for this instance of the Java virtual machine.
Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the Object.equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java™ programming language.)
Prints this component. Applications should override this method for components that must do special processing before being printed or should be printed differently than they are painted. The default implementation of this method calls the paint method. The origin of the graphics context, its (0, 0) coordinate point, is the top-left corner of this component. The clipping region of the graphics context is the bounding rectangle of this component.
Returns the offset, in bits, into the data element in which it is stored for the xth pixel of a scanline. This offset is the same for all scanlines.
Returns the name of the source file containing the execution point represented by this stack trace element. Generally, this corresponds to the SourceFile attribute of the relevant class file (as per The Java Virtual Machine Specification, Section 4.7.7). In some systems, the name may refer to some source code unit other than a file, such as an entry in source repository.
Returns a BigDecimal whose value is the integer part of (this / divisor). Since the integer part of the exact quotient does not depend on the rounding mode, the rounding mode does not affect the values returned by this method. The preferred scale of the result is (this.scale() - divisor.scale()). An ArithmeticException is thrown if the integer part of the exact quotient needs more than mc.precision digits.
The consumer of the particular image data stream for which this instance of the ImageFilter is filtering data. It is not initialized during the constructor, but rather during the getFilterInstance() method call when the FilteredImageSource is creating a unique instance of this object for a particular image data stream.
Returns the orientation of this scrollbar.
An alias for ISO_B4.
If the default drag cursor behavior is active, this method sets the default drag cursor for the specified actions supported by the drag source, the drop target action, and status, otherwise this method does nothing.
Repositions this stream to the position at the time the mark method was last called on this input stream. The general contract of reset is: If the method markSupported returns true, then: If the method mark has not been called since the stream was created, or the number of bytes read from the stream since mark was last called is larger than the argument to mark at that last call, then an IOException might be thrown. If such an IOException is not thrown, then the stream is reset to a state such that all the bytes read since the most recent call to mark (or since the start of the file, if mark has not been called) will be resupplied to subsequent callers of the read method, followed by any bytes that otherwise would have been the next input data as of the time of the call to reset. If the method markSupported returns false, then: The call to reset may throw an IOException. If an IOException is not thrown, then the stream is reset to a fixed state that depends on the particular type of the input stream and how it was created. The bytes that will be supplied to subsequent callers of the read method depend on the particular type of the input stream. The method reset for class InputStream does nothing except throw an IOException.
"This method is called by trusted subclasses of ObjectOutputStream that constructed ObjectOutputStream using the protected no-arg constructor. The subclass is expected to provide an override method with the modifier ""final""."
Constructs a new MenuShortcut for the specified virtual keycode.
Returns the connection state of the socket. If the socket was connected prior to being closed, then this method will continue to return true after the socket is closed.
Return a Shape that represents the region that this GraphicAttribute renders. This is used when a TextLayout is requested to return the outline of the text. The (untransformed) shape must not extend outside the rectangular bounds returned by getBounds. The default implementation returns the rectangle returned by getBounds(), transformed by the provided AffineTransform if present.
Returns an indicator of where the specified Point2D lies with respect to this line segment. See the method comments of relativeCCW(double, double, double, double, double, double) to interpret the return value.
Translates the decimal String representation of a BigInteger into a BigInteger. The String representation consists of an optional minus sign followed by a sequence of one or more decimal digits. The character-to-digit mapping is provided by Character.digit. The String may not contain any extraneous characters (whitespace, for example).
Returns the rendering hints for this op.
Starts playing this audio clip in a loop.
Invoked when the component has been made invisible.
The window-deactivated event type. This event is delivered when the Window is no longer the active Window. Only a Frame or a Dialog can be the active Window. The native windowing system may denote the active Window or its children with special decorations, such as a highlighted title bar. The active Window is always either the focused Window, or the first Frame or Dialog that is an owner of the focused Window.
Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the Object.equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java™ programming language.)
Does the DataFlavor represent a java.io.InputStream?
"Constant for the ""$"" key."
Constructs a RenderContext with a given transform. The area of interest is taken to be the entire renderable area. No rendering hints are used.
Sets the requested data array element in the first (default) bank to the given double.
Removes the specified window focus listener so that it no longer receives window events from this window. If l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT's threading model.
Returns the height of the page in 1/72nds of an inch.
Returns the current line number.
Returns an Iterator for the events comprising the gesture.
Creates the peer for the list. The peer allows us to modify the list's appearance without changing its functionality.
Returns the color/alpha components for the specified pixel in the default RGB color model format. A color conversion is done if necessary. The pixel value is specified by an array of data elements of type transferType passed in as an object reference. If inData is not a primitive array of type transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if inData is not large enough to hold a pixel value for this ColorModel. The returned value is in a non pre-multiplied format. Thus, if the alpha is premultiplied, this method divides it out of the color components. If the alpha value is 0, for example, the color values is 0. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception if they use an unsupported transferType.
Marks the current position in this input stream. The mark method of PushbackInputStream does nothing.
Set the handler invoked when this thread abruptly terminates due to an uncaught exception. A thread can take full control of how it responds to uncaught exceptions by having its uncaught exception handler explicitly set. If no such handler is set then the thread's ThreadGroup object acts as its handler.
Creates a buffering character-input stream that uses a default-sized input buffer.
Returns the LockInfo of an object for which the thread associated with this ThreadInfo is blocked waiting. A thread can be blocked waiting for one of the following: an object monitor to be acquired for entering or reentering a synchronization block/method. The thread is in the BLOCKED state waiting to enter the synchronized statement or method. an object monitor to be notified by another thread. The thread is in the WAITING or TIMED_WAITING state due to a call to the Object.wait method. a synchronization object responsible for the thread parking. The thread is in the WAITING or TIMED_WAITING state due to a call to the LockSupport.park method. The synchronization object is the object returned from LockSupport.getBlocker method. Typically it is an ownable synchronizer or a Condition. This method returns null if the thread is not in any of the above conditions.
Returns a List of String natives to which the specified DataFlavor corresponds. The List will be sorted from best native to worst. That is, the first native will best reflect data in the specified flavor to the underlying native platform. The returned List is a modifiable copy of this FlavorTable's internal data. Client code is free to modify the List without affecting this object.
Creates the TextField's peer. The peer allows us to modify the appearance of the TextField without changing its functionality.
Constructs a datagram packet for sending packets of length length with offset ioffsetto the specified port number on the specified host. The length argument must be less than or equal to buf.length.
"Constant for the ""Bamum Supplement"" Unicode character block."
Deselects the item at the specified index. Note that passing out of range parameters is invalid, and will result in unspecified behavior. If the item at the specified index is not selected, then the operation is ignored.
Interpolation hint value -- the color samples of the 4 nearest neighboring integer coordinate samples in the image are interpolated linearly to produce a color sample. Conceptually the image is viewed as a set of infinitely small point color samples which have value only at the centers of integer coordinate pixels and the space between those pixel centers is filled with linear ramps of colors that connect adjacent discrete samples in a straight line. As the image is scaled up, there are no blocky edges between the colors in the image as there are with NEAREST_NEIGHBOR, but the blending may show some subtle discontinuities along the horizontal and vertical edges that line up with the samples caused by a sudden change in the slope of the interpolation from one side of a sample to the other. As the image is scaled down, more image pixels have their color samples represented in the resulting output since each output pixel receives color information from up to 4 image pixels.
"Unicode script ""Bamum""."
Creates a new strategy for multi-buffering on this component with the required buffer capabilities. This is useful, for example, if only accelerated memory or page flipping is desired (as specified by the buffer capabilities). Each time this method is called, the existing buffer strategy for this component is discarded.
Constructs a SampleModel with the specified parameters.
Rounding mode to round away from zero. Always increments the digit prior to a non-zero discarded fraction. Note that this rounding mode never decreases the magnitude of the calculated value. Example: Rounding mode UP Examples Input Number Input rounded to one digit with UP rounding 5.5 6 2.5 3 1.6 2 1.1 2 1.0 1 -1.0 -1 -1.1 -2 -1.6 -2 -2.5 -3 -5.5 -6
Resets the peak memory usage statistic of this memory pool to the current memory usage.
Notify this instance that it may now render a GUI
Returns the parameter string representing the state of this MenuShortcut. This string is useful for debugging.
The user has released the mouse button. The ALT_MASK flag indicates that the middle button has been released. The META_MASKflag indicates that the right button has been released.
"Constant for the minus key, ""-"""
Sets the requested data array element in the first (default) bank to the specified value.
Simple message
The imageComplete method is called when the ImageProducer is finished delivering all of the pixels that the source image contains, or when a single frame of a multi-frame animation has been completed, or when an error in loading or producing the image has occurred. The ImageConsumer should remove itself from the list of consumers registered with the ImageProducer at this time, unless it is interested in successive frames.
Constructs an IllegalStateException with the specified detail message. A detail message is a String that describes this particular exception.
"Gets a PrintJob object which is the result of initiating a print operation on the toolkit's platform. Each actual implementation of this method should first check if there is a security manager installed. If there is, the method should call the security manager's checkPrintJobAccess method to ensure initiation of a print operation is allowed. If the default implementation of checkPrintJobAccess is used (that is, that method is not overriden), then this results in a call to the security manager's checkPermission method with a RuntimePermission(""queuePrintJob"") permission."
"Linear threshold. Table tag ""LTSH"" in the Open Type Specification."
Compares this String to another String, ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. Two characters c1 and c2 are considered the same ignoring case if at least one of the following is true: The two characters are the same (as compared by the == operator) Applying the method Character.toUpperCase(char) to each character produces the same result Applying the method Character.toLowerCase(char) to each character produces the same result
Flipping moves the contents of the back buffer to the front buffer, either by copying or by moving the video pointer.
Consumes this event so that it will not be processed in the default manner by the source which originated it.
"Constant for the ""Rejang"" Unicode character block."
Returns a string representation of the object.
Get the signature of the implementation method.
Ends any input composition that may currently be going on in this context. Depending on the platform and possibly user preferences, this may commit or delete uncommitted text. Any changes to the text are communicated to the active component using an input method event. If no input methods are available, then this method has no effect. A text editing component may call this in a variety of situations, for example, when the user moves the insertion point within the text (but outside the composed text), or when the component's text is saved to a file or copied to the clipboard.
Constructs a GlyphMetrics object.
Returns the identifier of this Thread. The thread ID is a positive long number generated when this thread was created. The thread ID is unique and remains unchanged during its lifetime. When a thread is terminated, this thread ID may be reused.
Gets the number of children currently nested in this BeanContext.
Gets the currently available services for this context.
Construct a new ConnectException with no detailed message.
Constructs a new throwable with null as its detail message. The cause is not initialized, and may subsequently be initialized by a call to initCause(java.lang.Throwable). The fillInStackTrace() method is called to initialize the stack trace data in the newly created throwable.
Write an XML representation of the specified object to the output.
Returns the width of this Dimension in double precision.
Constructs a string buffer with no characters in it and an initial capacity of 16 characters.
Identifies the KHMER range and decimal base.
The Escape key.
Returns a CharSequence that is a subsequence of this sequence. The subsequence starts with the char value at the specified index and ends with the char value at index end - 1. The length (in chars) of the returned sequence is end - start, so if start == end then an empty sequence is returned.
"Reports if an event set is in the ""default"" set."
Antialiasing hint value -- rendering is done without antialiasing.
Determines whether or not the specified point is inside the boundary of the arc.
Prints a character. The character is translated into one or more bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.
Creates a string input stream to read data from the specified string.
Sets the location of the end points and control points of this curve to the specified double coordinates.
Attribute key for the transform of a font. Values are instances of TransformAttribute. The default value is TransformAttribute.IDENTITY. The TransformAttribute class defines the constant IDENTITY. This corresponds to the transform passed to Font.deriveFont(AffineTransform). Since that transform is mutable and TextAttribute values must not be, the TransformAttribute wrapper class is used. The primary intent is to support scaling and skewing, though other effects are possible. Some transforms will cause the baseline to be rotated and/or shifted. The text and the baseline are transformed together so that the text follows the new baseline. For example, with text on a horizontal baseline, the new baseline follows the direction of the unit x vector passed through the transform. Text metrics are measured against this new baseline. So, for example, with other things being equal, text rendered with a rotated TRANSFORM and an unrotated TRANSFORM will measure as having the same ascent, descent, and advance. In styled text, the baselines for each such run are aligned one after the other to potentially create a non-linear baseline for the entire run of text. For more information, see TextLayout.getLayoutPath().
Close the stream. This method does not release the buffer, since its contents might still be required. Note: Invoking this method in this class will have no effect.
Sets a pixel in the DataBuffer using a float array of samples for input. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.
"Creates a file dialog for loading a file. The title of the file dialog is initially empty. This is a convenience method for FileDialog(parent, """", LOAD)."
The MediaType instance for ISO/DIN C8, 57 x 81 mm.
Returns the value of this HttpURLConnection's instanceFollowRedirects field.
Request standard optional ligatures.
Writes out a byte to the underlying output stream as a 1-byte value. If no exception is thrown, the counter written is incremented by 1.
Returns a string representing the state of this Menu. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.
Invoked when a key has been typed. This event occurs when a key press is followed by a key release.
Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.
Appends the specified character sequence to this writer. An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation out.write(csq.toString()) Depending on the specification of toString for the character sequence csq, the entire sequence may not be appended. For instance, invoking the toString method of a character buffer will return a subsequence whose content depends upon the buffer's position and limit.
Reads up to len bytes of data from the input stream into an array of bytes. An attempt is made to read as many as len bytes, but a smaller number may be read. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If len is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into b. The first byte read is stored into element b[off], the next one into b[off+1], and so on. The number of bytes read is, at most, equal to len. Let k be the number of bytes actually read; these bytes will be stored in elements b[off] through b[off+k-1], leaving elements b[off+k] through b[off+len-1] unaffected. In every case, elements b[0] through b[off] and elements b[off+len] through b[b.length-1] are unaffected. The read(b, off, len) method for class InputStream simply calls the method read() repeatedly. If the first such call results in an IOException, that exception is returned from the call to the read(b, off, len) method. If any subsequent call to read() results in a IOException, the exception is caught and treated as if it were end of file; the bytes read up to that point are stored into b and the number of bytes read before the exception occurred is returned. The default implementation of this method blocks until the requested amount of input data len has been read, end of file is detected, or an exception is thrown. Subclasses are encouraged to provide a more efficient implementation of this method.
The bitmask that indicates that a point lies to the right of this Rectangle2D.
Returns a Rectangle2D that encloses all of the bits drawn by this ShapeGraphicAttribute relative to the rendering position. A graphic can be rendered beyond its origin, ascent, descent, or advance; but if it does, this method's implementation should indicate where the graphic is rendered.
Creates a new, empty Book.
Text antialiasing hint key. The TEXT_ANTIALIASING hint can control the use of antialiasing algorithms for text independently of the choice used for shape rendering. Often an application may want to use antialiasing for text only and not for other shapes. Additionally, the algorithms for reducing the aliasing artifacts for text are often more sophisticated than those that have been developed for general rendering so this hint key provides additional values which can control the choices of some of those text-specific algorithms. If left in the DEFAULT state, this hint will generally defer to the value of the regular KEY_ANTIALIASING hint key. The allowable values for this hint are VALUE_TEXT_ANTIALIAS_ON VALUE_TEXT_ANTIALIAS_OFF VALUE_TEXT_ANTIALIAS_DEFAULT VALUE_TEXT_ANTIALIAS_GASP VALUE_TEXT_ANTIALIAS_LCD_HRGB VALUE_TEXT_ANTIALIAS_LCD_HBGR VALUE_TEXT_ANTIALIAS_LCD_VRGB VALUE_TEXT_ANTIALIAS_LCD_VBGR
Returns the type of scrolling that should take place in response to this event. This is determined by the native platform. Legal values are: MouseWheelEvent.WHEEL_UNIT_SCROLL MouseWheelEvent.WHEEL_BLOCK_SCROLL
Gets this graphics context's current color.
Encodes this String into a sequence of bytes using the given charset, storing the result into a new byte array. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement byte array. The CharsetEncoder class should be used when more control over the encoding process is required.
Sets whether this window should receive focus on subsequently being shown (with a call to setVisible(true)), or being moved to the front (with a call to toFront()). Note that setVisible(true) may be called indirectly (e.g. when showing an owner of the window makes the window to be shown). toFront() may also be called indirectly (e.g. when setVisible(true) is called on already visible window). In all such cases this property takes effect as well. The value of the property is not inherited by owned windows.
Returns the advance of this TextLayout. The advance is the distance from the origin to the advance of the rightmost (bottommost) character. This is in baseline-relative coordinates.
The west-resize cursor type.
Adds a VetoableChangeListener to this BeanContextChild to receive events whenever the specified property changes.
Add a PropertyChangeListener for a specific property. The same listener object may be added more than once. For each property, the listener will be invoked the number of times it was added for that property. If name or pcl is null, no exception is thrown and no action is taken.
Returns an integer Rectangle that completely encloses the Shape. Note that there is no guarantee that the returned Rectangle is the smallest bounding box that encloses the Shape, only that the Shape lies entirely within the indicated Rectangle. The returned Rectangle might also fail to completely enclose the Shape if the Shape overflows the limited range of the integer data type. The getBounds2D method generally returns a tighter bounding box due to its greater flexibility in representation. Note that the definition of insideness can lead to situations where points on the defining outline of the shape may not be considered contained in the returned bounds object, but only in cases where those points are also not considered contained in the original shape. If a point is inside the shape according to the contains(point) method, then it must be inside the returned Rectangle bounds object according to the contains(point) method of the bounds. Specifically: shape.contains(x,y) requires bounds.contains(x,y) If a point is not inside the shape, then it might still be contained in the bounds object: bounds.contains(x,y) does not imply shape.contains(x,y)
Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType. For a ComponentSampleModel, this is the same as the data type, and samples are transferred one per array element. The following code illustrates transferring data for one pixel from DataBuffer db1, whose storage layout is described by ComponentSampleModel csm1, to DataBuffer db2, whose storage layout is described by ComponentSampleModel csm2. The transfer is usually more efficient than using getPixel and setPixel. ComponentSampleModel csm1, csm2; DataBufferInt db1, db2; csm2.setDataElements(x, y, csm1.getDataElements(x, y, null, db1), db2); Using getDataElements and setDataElements to transfer between two DataBuffer/SampleModel pairs is legitimate if the SampleModel objects have the same number of bands, corresponding bands have the same number of bits per sample, and the TransferTypes are the same. A ClassCastException is thrown if obj is not a primitive array of type TransferType. An ArrayIndexOutOfBoundsException might be thrown if the coordinates are not in bounds, or if obj is not large enough to hold the pixel data.
Reference to an object already written into the stream.
Returns the value of the indexed component in the specified array object, as a float.
Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object. Returns an array of length 0 if the underlying executable takes no parameters. If a formal parameter type is a parameterized type, the Type object returned for it must accurately reflect the actual type parameters used in the source code. If a formal parameter type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.
The standard weight. This is the default value for WEIGHT.
Checks the error status of all of the images tracked by this media tracker with the specified identifier.
Identifies the MYANMAR range and decimal base.
The MediaType instance for Engineering E, 34 x 44 in.
"Maximum profile. Table tag ""maxp"" in the Open Type Specification."
Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.
Returns a string representing the state of this scrollbar. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.
Removes the menu item at the specified index from this menu.
Returns as int the sample in a specified band for the pixel located at (x,y). ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds.
Appends the specified character to this output stream. An invocation of this method of the form out.append(c) behaves in exactly the same way as the invocation out.print(c)
If passed to the appropriate variant of java.beans.Beans.instantiate this method will be called in order to associate the newly instantiated Applet (JavaBean) with its AppletContext, AppletStub, and Container. Conformant implementations shall: Associate the newly instantiated Applet with the appropriate AppletContext. Instantiate an AppletStub() and associate that AppletStub with the Applet via an invocation of setStub(). If BeanContext parameter is null, then it shall associate the Applet with its appropriate Container by adding that Applet to its Container via an invocation of add(). If the BeanContext parameter is non-null, then it is the responsibility of the BeanContext to associate the Applet with its Container during the subsequent invocation of its addChildren() method.
Returns the justification information for the glyph at the specified index into this GlyphVector.
Reports whether or not this class is a delegate of another.
Returns the character (Unicode code point) at the specified index. The index refers to char values (Unicode code units) and ranges from 0 to length()- 1. If the char value specified at the given index is in the high-surrogate range, the following index is less than the length of this sequence, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.
The standard value of the propertyName as fired from a BeanContext or other source of PropertyChangeEvents.
Invoked when the component's size changes.
Represents an unsigned short grayscale image, non-indexed). This image has a ComponentColorModel with a CS_GRAY ColorSpace. When data with non-opaque alpha is stored in an image of this type, the color data must be adjusted to a non-premultiplied form and the alpha discarded, as described in the AlphaComposite documentation.
Returns the decimal String representation of this BigInteger. The digit-to-character mapping provided by Character.forDigit is used, and a minus sign is prepended if appropriate. (This representation is compatible with the (String) constructor, and allows for String concatenation with Java's + operator.)
Prints an Object and then terminate the line. This method calls at first String.valueOf(x) to get the printed object's string value, then behaves as though it invokes print(String) and then println().
Returns a data element array representation of a pixel in this ColorModel, given an array of unnormalized color/alpha components. This array can then be passed to the setDataElements method of a WritableRaster object. An ArrayIndexOutOfBoundsException is thrown if the components array is not large enough to hold all the color and alpha components, starting at offset. If the obj variable is null, a new array is allocated. If obj is not null, it must be a primitive array of type transferType; otherwise, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if obj is not large enough to hold a pixel value for this ColorModel. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception if they use an unsupported transferType.
"Throws a SecurityException if the calling thread is not allowed to set the socket factory used by ServerSocket or Socket, or the stream handler factory used by URL. This method calls checkPermission with the RuntimePermission(""setFactory"") permission. If you override this method, then you should make a call to super.checkSetFactory at the point the overridden method would normally throw an exception."
Returns the size of an ulp of the argument. An ulp, unit in the last place, of a float value is the positive distance between this floating-point value and the float value next larger in magnitude. Note that for non-NaN x, ulp(-x) == ulp(x). Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive or negative infinity, then the result is positive infinity. If the argument is positive or negative zero, then the result is Float.MIN_VALUE. If the argument is ±Float.MAX_VALUE, then the result is equal to 2104.
Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)
Transfers the focus up one focus traversal cycle. Typically, the focus owner is set to this Component's focus cycle root, and the current focus cycle root is set to the new focus owner's focus cycle root. If, however, this Component's focus cycle root is a Window, then the focus owner is set to the focus cycle root's default Component to focus, and the current focus cycle root is unchanged.
The color rendered for light areas of 3D control objects, such as pushbuttons. This color is typically derived from the control background color to provide a 3D effect.
Returns the size of the table for a specified tag. Tags for sfnt tables include items like cmap, name and head.
Returns the pixel data for the specified rectangle of pixels in a primitive array of type TransferType. For image data supported by the Java 2D API, this will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE. Data may be returned in a packed format, thus increasing efficiency for data transfers. Generally, obj should be passed in as null, so that the Object will be created automatically and will be of the right primitive data type. The following code illustrates transferring data for a rectangular region of pixels from DataBuffer db1, whose storage layout is described by SampleModel sm1, to DataBuffer db2, whose storage layout is described by SampleModel sm2. The transfer will generally be more efficient than using getPixels/setPixels. SampleModel sm1, sm2; DataBuffer db1, db2; sm2.setDataElements(x, y, w, h, sm1.getDataElements(x, y, w, h, null, db1), db2); Using getDataElements/setDataElements to transfer between two DataBuffer/SampleModel pairs is legitimate if the SampleModels have the same number of bands, corresponding bands have the same number of bits per sample, and the TransferTypes are the same. If obj is non-null, it should be a primitive array of type TransferType. Otherwise, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds, or if obj is non-null and is not large enough to hold the pixel data.
The F8 function key, a non-ASCII action key.
Represents image data that is guaranteed to be either completely opaque, with an alpha value of 1.0, or completely transparent, with an alpha value of 0.0.
Returns the value of this Double as a long after a narrowing primitive conversion.
Sets the name of the component to the specified string.
The event mask for selecting window focus events.
Sets all samples for a rectangle of pixels from an int array containing one sample per array element. An ArrayIndexOutOfBoundsException might be thrown if the coordinates are not in bounds.
Constructs a new FontRenderContext object.
Returns the cube root of a double value. For positive finite x, cbrt(-x) == -cbrt(x); that is, the cube root of a negative value is the negative of the cube root of that value's magnitude. Special cases: If the argument is NaN, then the result is NaN. If the argument is infinite, then the result is an infinity with the same sign as the argument. If the argument is zero, then the result is a zero with the same sign as the argument.
Called on DataFlavor for every MIME Type parameter to allow DataFlavor subclasses to handle special parameters like the text/plain charset parameters, whose values are case insensitive. (MIME type parameter values are supposed to be case sensitive. This method is called for each parameter name/value pair and should return the normalized representation of the parameterValue. This method is never invoked by this implementation from 1.1 onwards.
Identifies all ranges, for full contextual shaping. This constant specifies all of the bit mask-based ranges. Use EmunSet.allOf(NumericShaper.Range.class) to specify all of the enum-based ranges.
Sets the location of the end points of this Line2D to the specified float coordinates.
Returns a similar AlphaComposite object that uses the specified compositing rule. If this object already uses the specified compositing rule, this object is returned.
Returns the width, in 1/72nds of an inch, of the imageable area of the page. This method takes into account the orientation of the page.
The number of bits used to represent a char value in unsigned binary form, constant 16.
Replaces an Object in the list of parameters with a Long. If the index lies beyond the current source list, the list is extended with nulls as needed.
Calls dragEnter on the registered DropTargetListener and passes it the specified DropTargetDragEvent. Has no effect if this DropTarget is not active.
"Selects the best text DataFlavor from an array of DataFlavors. Only DataFlavor.stringFlavor, and equivalent flavors, and flavors that have a primary MIME type of ""text"", are considered for selection. Flavors are first sorted by their MIME types in the following order: ""text/sgml"" ""text/xml"" ""text/html"" ""text/rtf"" ""text/enriched"" ""text/richtext"" ""text/uri-list"" ""text/tab-separated-values"" ""text/t140"" ""text/rfc822-headers"" ""text/parityfec"" ""text/directory"" ""text/css"" ""text/calendar"" ""application/x-java-serialized-object"" ""text/plain"" ""text/<other>"" For example, ""text/sgml"" will be selected over ""text/html"", and DataFlavor.stringFlavor will be chosen over DataFlavor.plainTextFlavor. If two or more flavors share the best MIME type in the array, then that MIME type will be checked to see if it supports the charset parameter. The following MIME types support, or are treated as though they support, the charset parameter: ""text/sgml"" ""text/xml"" ""text/html"" ""text/enriched"" ""text/richtext"" ""text/uri-list"" ""text/directory"" ""text/css"" ""text/calendar"" ""application/x-java-serialized-object"" ""text/plain"" The following MIME types do not support, or are treated as though they do not support, the charset parameter: ""text/rtf"" ""text/tab-separated-values"" ""text/t140"" ""text/rfc822-headers"" ""text/parityfec"" For ""text/<other>"" MIME types, the first time the JRE needs to determine whether the MIME type supports the charset parameter, it will check whether the parameter is explicitly listed in an arbitrarily chosen DataFlavor which uses that MIME type. If so, the JRE will assume from that point on that the MIME type supports the charset parameter and will not check again. If the parameter is not explicitly listed, the JRE will assume from that point on that the MIME type does not support the charset parameter and will not check again. Because this check is performed on an arbitrarily chosen DataFlavor, developers must ensure that all DataFlavors with a ""text/<other>"" MIME type specify the charset parameter if it is supported by that MIME type. Developers should never rely on the JRE to substitute the platform's default charset for a ""text/<other>"" DataFlavor. Failure to adhere to this restriction will lead to undefined behavior. If the best MIME type in the array does not support the charset parameter, the flavors which share that MIME type will then be sorted by their representation classes in the following order: java.io.InputStream, java.nio.ByteBuffer, [B, <all others>. If two or more flavors share the best representation class, or if no flavor has one of the three specified representations, then one of those flavors will be chosen non-deterministically. If the best MIME type in the array does support the charset parameter, the flavors which share that MIME type will then be sorted by their representation classes in the following order: java.io.Reader, java.lang.String, java.nio.CharBuffer, [C, <all others>. If two or more flavors share the best representation class, and that representation is one of the four explicitly listed, then one of those flavors will be chosen non-deterministically. If, however, no flavor has one of the four specified representations, the flavors will then be sorted by their charsets. Unicode charsets, such as ""UTF-16"", ""UTF-8"", ""UTF-16BE"", ""UTF-16LE"", and their aliases, are considered best. After them, the platform default charset and its aliases are selected. ""US-ASCII"" and its aliases are worst. All other charsets are chosen in alphabetical order, but only charsets supported by this implementation of the Java platform will be considered. If two or more flavors share the best charset, the flavors will then again be sorted by their representation classes in the following order: java.io.InputStream, java.nio.ByteBuffer, [B, <all others>. If two or more flavors share the best representation class, or if no flavor has one of the three specified representations, then one of those flavors will be chosen non-deterministically."
Inserts a menu item with the specified label into this menu at the specified position. This is a convenience method for insert(menuItem, index).
Returns the number of tiles in the X direction.
The VetoableChangeSupport associated with this BeanContextChildSupport.
Prints a character and then terminate the line. This method behaves as though it invokes print(char) and then println().
Returns a Shape enclosing the logical selection in the specified range, extended to the specified bounds. If the selection range includes the first logical character, the selection is extended to the portion of bounds before the start of this TextLayout. If the range includes the last logical character, the selection is extended to the portion of bounds after the end of this TextLayout. The height (width on vertical lines) of the selection is always extended to bounds. The selection can be discontiguous on lines with mixed-direction text. Only those characters in the logical range between start and limit appear selected. For example, consider the text 'ABCdef' where capital letters indicate right-to-left text, rendered on a right-to-left line, with a logical selection from 0 to 4 ('ABCd'). The text appears as follows, with bold standing in for the selection, and underlining for the extension: defCBA The selection is discontiguous because the selected characters are visually discontiguous. Also note that since the range includes the first logical character (A), the selection is extended to the portion of the bounds before the start of the layout, which in this case (a right-to-left line) is the right portion of the bounds.
The array index for the controlHighlight system color.
Returns the requested data array element from the specified bank.
Returns an array of all the listeners which have been associated with the named property.
Called when an ancestor of the source is resized.
Invoked when the mouse cursor has been moved onto a component but no buttons have been pushed.
Returns the Class object representing the class or interface that declares the field represented by this Field object.
Specifies the desired cross feed and feed print resolutions in dots per inch for pages using these attributes. The same value is used for both resolutions. The actual resolutions will be determined by the limitations of the implementation and the target printer. Not specifying the property is equivalent to specifying 72.
ICC Profile Class Signature: 'abst'.
Get the MenuShortcut object associated with this menu item,
Writes a double value, which is comprised of eight bytes, to the output stream. It does this as if it first converts this double value to a long in exactly the manner of the Double.doubleToLongBits method and then writes the long value in exactly the manner of the writeLong method. The bytes written by this method may be read by the readDouble method of interface DataInput, which will then return a double equal to v.
The X coordinate of the start point of the line segment.
Returns the descent of the text. The descent is the distance from the baseline to the descender line. The descent usually represents the distance to the bottom of lower case letters like 'p'. Some characters can extend below the descender line.
Constructs an IOException with null as its error detail message.
Enable or disable finalization on exit; doing so specifies that the finalizers of all objects that have finalizers that have not yet been automatically invoked are to be run before the Java runtime exits. By default, finalization on exit is disabled. If there is a security manager, its checkExit method is first called with 0 as its argument to ensure the exit is allowed. This could result in a SecurityException.
Adds an item to this Choice menu.
reject the Drop.
Return the title of this package.
Constructs a DataFlavor that represents a Java class. The returned DataFlavor will have the following characteristics: representationClass = representationClass mimeType = application/x-java-serialized-object
An alias for ISO_B5.
"Performs a synchronization operation on each call site in the given array, forcing all other threads to throw away any cached values previously loaded from the target of any of the call sites. This operation does not reverse any calls that have already started on an old target value. (Java supports forward time travel only.) The overall effect is to force all future readers of each call site's target to accept the most recently stored value. (""Most recently"" is reckoned relative to the syncAll itself.) Conversely, the syncAll call may block until all readers have (somehow) decached all previous versions of each call site's target. To avoid race conditions, calls to setTarget and syncAll should generally be performed under some sort of mutual exclusion. Note that reader threads may observe an updated target as early as the setTarget call that install the value (and before the syncAll that confirms the value). On the other hand, reader threads may observe previous versions of the target until the syncAll call returns (and after the setTarget that attempts to convey the updated version). This operation is likely to be expensive and should be used sparingly. If possible, it should be buffered for batch processing on sets of call sites. If sites contains a null element, a NullPointerException will be raised. In this case, some non-null elements in the array may be processed before the method returns abnormally. Which elements these are (if any) is implementation-dependent. Java Memory Model details In terms of the Java Memory Model, this operation performs a synchronization action which is comparable in effect to the writing of a volatile variable by the current thread, and an eventual volatile read by every other thread that may access one of the affected call sites. The following effects are apparent, for each individual call site S: A new volatile variable V is created, and written by the current thread. As defined by the JMM, this write is a global synchronization event. As is normal with thread-local ordering of write events, every action already performed by the current thread is taken to happen before the volatile write to V. (In some implementations, this means that the current thread performs a global release operation.) Specifically, the write to the current target of S is taken to happen before the volatile write to V. The volatile write to V is placed (in an implementation specific manner) in the global synchronization order. Consider an arbitrary thread T (other than the current thread). If T executes a synchronization action A after the volatile write to V (in the global synchronization order), it is therefore required to see either the current target of S, or a later write to that target, if it executes a read on the target of S. (This constraint is called ""synchronization-order consistency"".) The JMM specifically allows optimizing compilers to elide reads or writes of variables that are known to be useless. Such elided reads and writes have no effect on the happens-before relation. Regardless of this fact, the volatile V will not be elided, even though its written value is indeterminate and its read value is not used. Because of the last point, the implementation behaves as if a volatile read of V were performed by T immediately after its action A. In the local ordering of actions in T, this read happens before any future read of the target of S. It is as if the implementation arbitrarily picked a read of S's target by T, and forced a read of V to precede it, thereby ensuring communication of the new target value. As long as the constraints of the Java Memory Model are obeyed, implementations may delay the completion of a syncAll operation while other threads (T above) continue to use previous values of S's target. However, implementations are (as always) encouraged to avoid livelock, and to eventually require all threads to take account of the updated target. Discussion: For performance reasons, syncAll is not a virtual method on a single call site, but rather applies to a set of call sites. Some implementations may incur a large fixed overhead cost for processing one or more synchronization operations, but a small incremental cost for each additional call site. In any case, this operation is likely to be costly, since other threads may have to be somehow interrupted in order to make them notice the updated target value. However, it may be observed that a single call to synchronize several sites has the same formal effect as many calls, each on just one of the sites. Implementation Note: Simple implementations of MutableCallSite may use a volatile variable for the target of a mutable call site. In such an implementation, the syncAll method can be a no-op, and yet it will conform to the JMM behavior documented above."
"Adds a PropertyChangeListener to the listener list. The listener is registered for all bound properties of this class, including the following: this Component's font (""font"") this Component's background color (""background"") this Component's foreground color (""foreground"") this Component's focusability (""focusable"") this Component's focus traversal keys enabled state (""focusTraversalKeysEnabled"") this Component's Set of FORWARD_TRAVERSAL_KEYS (""forwardFocusTraversalKeys"") this Component's Set of BACKWARD_TRAVERSAL_KEYS (""backwardFocusTraversalKeys"") this Component's Set of UP_CYCLE_TRAVERSAL_KEYS (""upCycleFocusTraversalKeys"") this Component's preferred size (""preferredSize"") this Component's minimum size (""minimumSize"") this Component's maximum size (""maximumSize"") this Component's name (""name"") Note that if this Component is inheriting a bound property, then no event will be fired in response to a change in the inherited property. If listener is null, no exception is thrown and no action is performed."
This method returns the Component associated with this DropTargetContext.
Request standard kerning.
Returns the end Point2D of this Line2D.
Constructs a new String by decoding the specified array of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the byte array. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required.
ICC Profile Color Space Type Signature: '8CLR'.
Passes along the properties from the source object after adding a property indicating the cropped region. This method invokes super.setProperties, which might result in additional properties being added. Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being filtered. Developers using this class to filter pixels from an image should avoid calling this method directly since that operation could interfere with the filtering operation.
Returns the height of the framing rectangle in double precision.
Returns a BigInteger whose value is (thisexponent). Note that exponent is an integer rather than a BigInteger.
Allocates a new String that contains characters from a subarray of the Unicode code point array argument. The offset argument is the index of the first code point of the subarray and the count argument specifies the length of the subarray. The contents of the subarray are converted to chars; subsequent modification of the int array does not affect the newly created string.
Adds the specified Accessible child of the object to the object's selection. If the object supports multiple selections, the specified child is added to any existing selection, otherwise it replaces any existing selection in the object. If the specified child is already selected, this method has no effect.
Returns whether this object can accept focus or not.
Determines if the specified character is a Unicode space character. A character is considered to be a space character if and only if it is specified to be a space character by the Unicode Standard. This method returns true if the character's general category type is any of the following: SPACE_SEPARATOR LINE_SEPARATOR PARAGRAPH_SEPARATOR Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isSpaceChar(int) method.
Returns whether this event has been consumed.
Constructs a new GeneralPath object from an arbitrary Shape object. All of the initial geometry and the winding rule for this path are taken from the specified Shape object.
The overall height of the full ellipse of which this arc is a partial section (not considering the angular extents).
Constructs a MimeTypeParseException with the specified detail message.
Add a PropertyChangeListener to the listener list. The listener is registered for all properties. The same listener object may be added more than once, and will be called as many times as it is added. If listener is null, no exception is thrown and no action is taken.
Specifies whether, for jobs using these attributes, the application should print all pages, the range specified by the return value of getPageRanges, or the current selection. Not specifying this attribute is equivalent to specifying DefaultSelectionType.ALL.
Deletes the specified menu shortcut.
Tests if the specified coordinates are inside the boundary of the Shape, as described by the definition of insideness.
Reads a single character.
Tests if the interior of this Line2D entirely contains the specified set of rectangular coordinates. This method is required to implement the Shape interface, but in the case of Line2D objects it always returns false since a line contains no area.
An alias for NA_10X14_ENVELOPE.
The wait cursor type.
Returns the parent container for this menu component.
Removes the specified selected item in the object from the object's selection. If the specified item isn't currently selected, this method has no effect.
Disposes of this graphics context and releases any system resources that it is using. A Graphics object cannot be used after disposehas been called. When a Java program runs, a large number of Graphics objects can be created within a short time frame. Although the finalization process of the garbage collector also disposes of the same system resources, it is preferable to manually free the associated resources by calling this method rather than to rely on a finalization process which may not run to completion for a long period of time. Graphics objects which are provided as arguments to the paint and update methods of components are automatically released by the system when those methods return. For efficiency, programmers should call dispose when finished using a Graphics object only if it was created directly from a component or another Graphics object.
This method returns the vertical coordinate of the cursor location in screen coordinates at the moment this event occurred, or zero if the cursor location is not specified for this event.
Appends the specified character to this writer. An invocation of this method of the form out.append(c) behaves in exactly the same way as the invocation out.write(c)
Gets the block increment of this scroll bar. The block increment is the value that is added or subtracted when the user activates the block increment area of the scroll bar, generally through a mouse or keyboard gesture that the scroll bar receives as an adjustment event. The block increment must be greater than zero.
Stops all threads in this thread group. First, the checkAccess method of this thread group is called with no arguments; this may result in a security exception. This method then calls the stop method on all the threads in this thread group and in all of its subgroups.
Returns the width of the framing rectangle in double precision.
"Returns annotations that are associated with this element. If there are no annotations associated with this element, the return value is an array of length 0. The difference between this method and AnnotatedElement.getAnnotation(Class) is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by ""looking through"" a container annotation. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers."
Determines whether the specified coordinates are contained in this Polygon.
The X coordinate of the upper-left pixel of this Raster.
If this Class object represents a local or anonymous class within a constructor, returns a Constructor object representing the immediately enclosing constructor of the underlying class. Returns null otherwise. In particular, this method returns null if the underlying class is a local or anonymous class immediately enclosed by a type declaration, instance initializer or static initializer.
Return the height, in 1/72nds of an inch, of the imageable area of the page. This method takes into account the orientation of the page.
The MediaType instance for ISO/DIN and JIS A1, 594 x 841 mm.
"Returns the simple name of the underlying class as given in the source code. Returns an empty string if the underlying class is anonymous. The simple name of an array is the simple name of the component type with ""[]"" appended. In particular the simple name of an array whose component type is anonymous is ""[]""."
Sets the value of the indexed component of the specified array object to the specified boolean value.
This constant value indicates that the purpose of the file dialog window is to locate a file from which to read.
Returns the requested data array element from the first (default) bank as a float.
The Class instance representing the primitive type float.
This state bit indicates that frame is iconified.
Compares this Font object to the specified Object.
"Produces an early-bound method handle for a virtual method. It will bypass checks for overriding methods on the receiver, as if called from an invokespecial instruction from within the explicitly specified specialCaller. The type of the method handle will be that of the method, with a suitably restricted receiver type prepended. (The receiver type will be specialCaller or a subtype.) The method and all its argument types must be accessible to the lookup object. Before method resolution, if the explicitly specified caller class is not identical with the lookup class, or if this lookup object does not have private access privileges, the access fails. The returned method handle will have variable arity if and only if the method's variable arity modifier bit (0x0080) is set. (Note: JVM internal methods named ""<init>"" are not visible to this API, even though the invokespecial instruction can refer to them in special circumstances. Use findConstructor to access instance initialization methods in a safe manner.) Example: import static java.lang.invoke.MethodHandles.*; import static java.lang.invoke.MethodType.*; ... static class Listie extends ArrayList { public String toString() { return ""[wee Listie]""; } static Lookup lookup() { return MethodHandles.lookup(); } } ... // no access to constructor via invokeSpecial: MethodHandle MH_newListie = Listie.lookup() .findConstructor(Listie.class, methodType(void.class)); Listie l = (Listie) MH_newListie.invokeExact(); try { assertEquals(""impossible"", Listie.lookup().findSpecial( Listie.class, ""<init>"", methodType(void.class), Listie.class)); } catch (NoSuchMethodException ex) { } // OK // access to super and self methods via invokeSpecial: MethodHandle MH_super = Listie.lookup().findSpecial( ArrayList.class, ""toString"" , methodType(String.class), Listie.class); MethodHandle MH_this = Listie.lookup().findSpecial( Listie.class, ""toString"" , methodType(String.class), Listie.class); MethodHandle MH_duper = Listie.lookup().findSpecial( Object.class, ""toString"" , methodType(String.class), Listie.class); assertEquals(""[]"", (String) MH_super.invokeExact(l)); assertEquals(""""+l, (String) MH_this.invokeExact(l)); assertEquals(""[]"", (String) MH_duper.invokeExact(l)); // ArrayList method try { assertEquals(""inaccessible"", Listie.lookup().findSpecial( String.class, ""toString"", methodType(String.class), Listie.class)); } catch (IllegalAccessException ex) { } // OK Listie subl = new Listie() { public String toString() { return ""[subclass]""; } }; assertEquals(""""+l, (String) MH_this.invokeExact(subl)); // Listie method"
Returns whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle implicitly. If true, during normal forward focus traversal, the Component traversed after a focus cycle root will be the focus-cycle-root's default Component to focus. If false, the next Component in the focus traversal cycle rooted at the specified focus cycle root will be traversed instead.
Returns the print resolution for pages using these attributes. Index 0 of the array specifies the cross feed direction resolution (typically the horizontal resolution). Index 1 of the array specifies the feed direction resolution (typically the vertical resolution). Index 2 of the array specifies whether the resolutions are in dots per inch or dots per centimeter. 3 denotes dots per inch. 4 denotes dots per centimeter.
The number of bands in the Raster.
ICC Profile Tag Signature: 'dmnd'.
"Frame is in the ""normal"" state. This symbolic constant names a frame state with all state bits cleared."
Returns the requested data array element from the specified bank as a double.
Creates the directory named by this abstract pathname.
Converts this BigDecimal to a BigInteger, checking for lost information. An exception is thrown if this BigDecimal has a nonzero fractional part.
Returns the value of this Integer as a float after a widening primitive conversion.
Constructs an UndeclaredThrowableException with the specified Throwable and a detail message.
Releases a given key. Key codes that have more than one physical key associated with them (e.g. KeyEvent.VK_SHIFT could mean either the left or right shift key) will map to the left key.
Returns the Y coordinate shearing element (m10) of the 3x3 affine transformation matrix.
Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. A subclass must provide an implementation of this method.
Gets the font of this component.
Returns a String object representing this Character's value. The result is a string of length 1 whose sole component is the primitive char value represented by this Character object.
Tells whether this stream is ready to be read. Character-array readers are always ready to be read.
Constructs a solid BasicStroke with the specified line width and with default values for the cap and join styles.
Finds the resource with the given name. Class loader implementations should override this method to specify where to find resources.
Nearest-neighbor interpolation type.
Causes the next call to the nextToken method of this tokenizer to return the current value in the ttype field, and not to modify the value in the nval or sval field.
Constructs a ConvolveOp given a Kernel, an edge condition, and a RenderingHints object (which may be null).
An alias for ISO_A4.
Disposes of system resources associated with this ColorModel once this ColorModel is no longer referenced.
Determines whether or not word token are automatically lowercased. If the flag argument is true, then the value in the sval field is lowercased whenever a word token is returned (the ttype field has the value TT_WORD by the nextToken method of this tokenizer. If the flag argument is false, then the sval field is not modified.
Gets the instance of MenuItem associated with the specified MenuShortcut object, or null if none of the menu items being managed by this menu bar is associated with the specified menu shortcut.
Returns whether the drawing buffer was recently restored from a lost state and reinitialized to the default background color (white). Since the buffers in a buffer strategy are usually type VolatileImage, they may become lost. If a surface has been recently restored from a lost state since the last call to getDrawGraphics, it may require repainting. For a discussion on lost buffers, see VolatileImage.
Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this ThreadInfo has blocked to enter or reenter a monitor since thread contention monitoring is enabled. I.e. the total accumulated time the thread has been in the BLOCKED state since thread contention monitoring was last enabled. This method returns -1 if thread contention monitoring is disabled. The Java virtual machine may measure the time with a high resolution timer. This statistic is reset when the thread contention monitoring is reenabled.
Returns the square of the distance between two points.
Returns the amount of free memory in the Java Virtual Machine. Calling the gc method may result in increasing the value returned by freeMemory.
Returns the bounding box of the transformed destination. The rectangle returned is the actual bounding box of the transformed points. The coordinates of the upper-left corner of the returned rectangle might not be (0, 0).
Utility routine to check if the multicast address has node scope.
Constructor to create a new NotActiveException without a reason.
Returns a string representation of the argument as an unsigned decimal value. The argument is converted to unsigned decimal representation and returned as a string exactly as if the argument and radix 10 were given as arguments to the toUnsignedString(long, int) method.
Constructs an initially invisible, modeless Dialog with the specified owner Dialog and title.
Paints a 3-D highlighted rectangle filled with the current color. The edges of the rectangle will be highlighted so that it appears as if the edges were beveled and lit from the upper left corner. The colors used for the highlighting effect will be determined from the current color.
This event id indicates that a meaningful action occurred.
Gets the instance of BeanContext that this object is providing the implementation for.
Returns the height of this Kernel.
notify this instance that it may no longer render a GUI.
The pixels of the image are delivered using one or more calls to the setPixels method. Each call specifies the location and size of the rectangle of source pixels that are contained in the array of pixels. The specified ColorModel object should be used to convert the pixels into their corresponding color and alpha components. Pixel (m,n) is stored in the pixels array at index (n * scansize + m + off). The pixels delivered using this method are all stored as ints. this method are all stored as ints.
Returns the index of the rightmost (lowest-order) one bit in this BigInteger (the number of zero bits to the right of the rightmost one bit). Returns -1 if this BigInteger contains no one bits. (Computes (this == 0? -1 : log2(this & -this)).)
Returns the number of Actions available in this object. The default behavior of a menu item is to have one action.
This value indicates that each row of components should be left-justified.
Returns the image as one large tile. The Raster returned is a copy of the image data is not updated if the image is changed.
Constructs a ShortLookupTable object from an array of short arrays representing a lookup table for each band. The offset will be subtracted from the input values before indexing into the arrays. The number of bands is the length of the data argument. The data array for each band is stored as a reference.
Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist. The check for the existence of the file and the creation of the file if it does not exist are a single operation that is atomic with respect to all other filesystem activities that might affect the file. Note: this method should not be used for file-locking, as the resulting protocol cannot be made to work reliably. The FileLock facility should be used instead.
Returns whether or not the Meta modifier is down on this event.
"Checks whether this component ""contains"" the specified point, where the point's x and y coordinates are defined to be relative to the coordinate system of this component."
"Constant for the ""CJK Strokes"" Unicode character block."
Returns whether this Robot automatically invokes waitForIdle after generating an event.
Returns a BigInteger whose value is (thisexponent mod m). (Unlike pow, this method permits negative exponents.)
Returns an array of all the mouse listeners registered on this TrayIcon.
Constructs a datagram packet for sending packets of length length to the specified port number on the specified host. The length argument must be less than or equal to buf.length.
Gets the name of the component.
Constructs a new AffineTransform from 6 double precision values representing the 6 specifiable entries of the 3x3 transformation matrix.
Returns the leading surrogate (a high surrogate code unit) of the surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding. If the specified character is not a supplementary character, an unspecified char is returned. If isSupplementaryCodePoint(x) is true, then isHighSurrogate(highSurrogate(x)) and toCodePoint(highSurrogate(x), lowSurrogate(x)) == x are also always true.
Returns the end point.
"Creates an implementation of listenerInterface in which the method named listenerMethodName passes the value of the event expression, eventPropertyName, to the final method in the statement, action, which is applied to the target. All of the other listener methods do nothing. The eventPropertyName string is used to extract a value from the incoming event object that is passed to the target method. The common case is the target method takes no arguments, in which case a value of null should be used for the eventPropertyName. Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the eventPropertyName string is a sequence of methods or properties where each method or property is applied to the value returned by the preceding method starting from the incoming event object. The syntax is: propertyName{.propertyName}* where propertyName matches a method or property. For example, to extract the point property from a MouseEvent, you could use either ""point"" or ""getPoint"" as the eventPropertyName. To extract the ""text"" property from a MouseEvent with a JLabel source use any of the following as eventPropertyName: ""source.text"", ""getSource.text"" ""getSource.getText"" or ""source.getText"". If a method can not be found, or an exception is generated as part of invoking a method a RuntimeException will be thrown at dispatch time. For example, if the incoming event object is null, and eventPropertyName is non-null and not empty, a RuntimeException will be thrown. The action argument is of the same format as the eventPropertyName argument where the last property name identifies either a method name or writable property. If the listenerMethodName is null all methods in the interface trigger the action to be executed on the target. For example, to create a MouseListener that sets the target object's origin property to the incoming MouseEvent's location (that's the value of mouseEvent.getPoint()) each time a mouse button is pressed, one would write: EventHandler.create(MouseListener.class, target, ""origin"", ""point"", ""mousePressed""); This is comparable to writing a MouseListener in which all of the methods except mousePressed are no-ops: //Equivalent code using an inner class instead of EventHandler. new MouseAdapter() { public void mousePressed(MouseEvent e) { target.setOrigin(e.getPoint()); } };"
Invoked when a window has been closed as the result of calling dispose on the window.
Antialiasing hint key. The ANTIALIASING hint controls whether or not the geometry rendering methods of a Graphics2D object will attempt to reduce aliasing artifacts along the edges of shapes. A typical antialiasing algorithm works by blending the existing colors of the pixels along the boundary of a shape with the requested fill paint according to the estimated partial pixel coverage of the shape. The allowable values for this hint are VALUE_ANTIALIAS_ON VALUE_ANTIALIAS_OFF VALUE_ANTIALIAS_DEFAULT
Returns a copy of the center point of the radial gradient.
Tests if this thread group is either the thread group argument or one of its ancestor thread groups.
Returns a high precision and more accurate bounding box of the Shape than the getBounds method. Note that there is no guarantee that the returned Rectangle2D is the smallest bounding box that encloses the Shape, only that the Shape lies entirely within the indicated Rectangle2D. The bounding box returned by this method is usually tighter than that returned by the getBounds method and never fails due to overflow problems since the return value can be an instance of the Rectangle2D that uses double precision values to store the dimensions. Note that the definition of insideness can lead to situations where points on the defining outline of the shape may not be considered contained in the returned bounds object, but only in cases where those points are also not considered contained in the original shape. If a point is inside the shape according to the contains(point) method, then it must be inside the returned Rectangle2D bounds object according to the contains(point) method of the bounds. Specifically: shape.contains(p) requires bounds.contains(p) If a point is not inside the shape, then it might still be contained in the bounds object: bounds.contains(p) does not imply shape.contains(p)
Returns the name of the organization, vendor or company that provided this implementation.
An alias for ISO_C5.
Determines which cell in the layout grid contains the point specified by (x, y). Each cell is identified by its column index (ranging from 0 to the number of columns minus 1) and its row index (ranging from 0 to the number of rows minus 1). If the (x, y) point lies outside the grid, the following rules are used. The column index is returned as zero if x lies to the left of the layout for a left-to-right container or to the right of the layout for a right-to-left container. The column index is returned as the number of columns if x lies to the right of the layout in a left-to-right container or to the left in a right-to-left container. The row index is returned as zero if y lies above the layout, and as the number of rows if y lies below the layout. The orientation of a container is determined by its ComponentOrientation property.
"Constant for the ""Balinese"" Unicode character block."
"Returns the cause of this throwable or null if the cause is nonexistent or unknown. (The cause is the throwable that caused this throwable to get thrown.) This implementation returns the cause that was supplied via one of the constructors requiring a Throwable, or that was set after creation with the initCause(Throwable) method. While it is typically unnecessary to override this method, a subclass can override it to return a cause set by some other means. This is appropriate for a ""legacy chained throwable"" that predates the addition of chained exceptions to Throwable. Note that it is not necessary to override any of the PrintStackTrace methods, all of which invoke the getCause method to determine the cause of a throwable."
This flag in the infoflags argument to imageUpdate indicates that a static image which was previously drawn is now complete and can be drawn again in its final form. The x, y, width, and height arguments to the imageUpdate callback method should be ignored.
Returns the X coordinate of the start point in double in precision.
Return the serialVersionUID for this class. The serialVersionUID defines a set of classes all with the same name that have evolved from a common root class and agree to be serialized and deserialized using a common format. NonSerializable classes have a serialVersionUID of 0L.
Returns the platform MBeanServer. On the first call to this method, it first creates the platform MBeanServer by calling the MBeanServerFactory.createMBeanServer method and registers each platform MXBean in this platform MBeanServer with its ObjectName. This method, in subsequent calls, will simply return the initially created platform MBeanServer. MXBeans that get created and destroyed dynamically, for example, memory pools and managers, will automatically be registered and deregistered into the platform MBeanServer. If the system property javax.management.builder.initial is set, the platform MBeanServer creation will be done by the specified MBeanServerBuilder. It is recommended that this platform MBeanServer also be used to register other application managed beans besides the platform MXBeans. This will allow all MBeans to be published through the same MBeanServer and hence allow for easier network publishing and discovery. Name conflicts with the platform MXBeans should be avoided.
Obtains this toolkit's implementation of helper class for MouseInfo operations.
Gets the screen device metrics for rendering of the font.
ICC Profile Tag Signature: 'ncl2'.
Returns the advance of the glyph along the baseline (either horizontal or vertical).
Provides a target method handle with one or more bound arguments in advance of the method handle's invocation. The formal parameters to the target corresponding to the bound arguments are called bound parameters. Returns a new method handle which saves away the bound arguments. When it is invoked, it receives arguments for any non-bound parameters, binds the saved arguments to their corresponding parameters, and calls the original target. The type of the new method handle will drop the types for the bound parameters from the original target type, since the new method handle will no longer require those arguments to be supplied by its callers. Each given argument object must match the corresponding bound parameter type. If a bound parameter type is a primitive, the argument object must be a wrapper, and will be unboxed to produce the primitive value. The pos argument selects which parameters are to be bound. It may range between zero and N-L (inclusively), where N is the arity of the target method handle and L is the length of the values array.
Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer. Special cases: If the argument value is already equal to a mathematical integer, then the result is the same as the argument. If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument. If the argument value is less than zero but greater than -1.0, then the result is negative zero. Note that the value of Math.ceil(x) is exactly the value of -Math.floor(-x).
Remove all cookies in this cookie store.
Constructs a PageAttributes instance with default values for every attribute.
Returns the bounds of this TextLayout. The bounds are in standard coordinates. Due to rasterization effects, this bounds might not enclose all of the pixels rendered by the TextLayout. It might not coincide exactly with the ascent, descent, origin or advance of the TextLayout.
"Constant for the ""+"" key."
Creates an instance of Dimension with a width of zero and a height of zero.
Creates a DataBuffer that corresponds to this SinglePixelPackedSampleModel. The DataBuffer's data type and size will be consistent with this SinglePixelPackedSampleModel. The DataBuffer will have a single bank.
Returns annotations that are present on this element. If there are no annotations present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.
Returns whether the focus traversal policy has been explicitly set for this Container. If this method returns false, this Container will inherit its focus traversal policy from an ancestor.
"Optical bounds. Table tag ""opbd"" in the Open Type Specification."
Tag for int data.
"Glyph metamorphosis. Table tag ""mort"" in the Open Type Specification."
Called as the cursor's hotspot exits a platform-dependent drop site. This method is invoked when any of the following conditions are true: The cursor's hotspot no longer intersects the operable part of the drop site associated with the previous dragEnter() invocation. OR The drop site associated with the previous dragEnter() invocation is no longer active. OR The drop site associated with the previous dragEnter() invocation has rejected the drag.
Returns a float array containing the color and alpha components of the Color, in the ColorSpace of the Color. If compArray is null, an array with length equal to the number of components in the associated ColorSpace plus one is created for the return value. Otherwise, compArray must have at least this length and it is filled in with the components and returned.
Translates a BigInteger unscaled value and an int scale into a BigDecimal. The value of the BigDecimal is (unscaledVal × 10-scale).
Gets the exception handler for this stream.
Appends the string representation of the char array argument to this sequence. The characters of the array argument are appended, in order, to the contents of this sequence. The length of this sequence increases by the length of the argument. The overall effect is exactly as if the argument were converted to a string by the method String.valueOf(char[]), and the characters of that string were then appended to this character sequence.
Removes the specified action listener so that it no longer receives action events from this text field. If l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT's threading model.
Reports whether or not this BeanContext is empty. A BeanContext is considered empty when it contains zero nested children.
Returns the bounding box of the filtered destination image. Since this is not a geometric operation, the bounding box does not change.
Allocates a new Thread object. This constructor has the same effect as Thread (null, target, name).
The underlying character-output stream.
Dithering hint key. The DITHERING hint controls how closely to approximate a color when storing into a destination with limited color resolution. Some rendering destinations may support a limited number of color choices which may not be able to accurately represent the full spectrum of colors that can result during rendering operations. For such a destination the DITHERING hint controls whether rendering is done with a flat solid fill of a single pixel value which is the closest supported color to what was requested, or whether shapes will be filled with a pattern of colors which combine to better approximate that color. The allowable values for this hint are VALUE_DITHER_DISABLE VALUE_DITHER_ENABLE VALUE_DITHER_DEFAULT
Reads a 32 bit int.
Constructs a PropertyEditorSupport object.
Returns true if and only if the underlying class is an anonymous class.
ICC Profile Tag Signature: 'psd1'.
Delivers an event to this component or one of its sub components.
Reads the next byte of data from this piped input stream. The value byte is returned as an int in the range 0 to 255. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.
Gets the preferences for the rendering algorithms. Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. Returns all of the hint key/value pairs that were ever specified in one operation. Refer to the RenderingHints class for definitions of some common keys and values.
Creates a new print stream, without automatic line flushing, with the specified file and charset. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will encode characters using the provided charset.
ICC Profile Tag Signature: 'gamt'.
Renders a RenderedImage, applying a transform from image space into user space before drawing. The transformation from user space into device space is done with the current Transform in the Graphics2D. The specified transformation is applied to the image before the transform attribute in the Graphics2D context is applied. The rendering attributes applied include the Clip, Transform, and Composite attributes. Note that no rendering is done if the specified transform is noninvertible.
Returns the human presentable name for the data format that this DataFlavor represents. This name would be localized for different countries.
Returns the greater of two long values. That is, the result is the argument closer to the value of Long.MAX_VALUE. If the arguments have the same value, the result is that same value.
Returns the end offset within the selected text. If there is no selection, but there is a caret, the start and end offsets will be the same. Return 0 if the text is empty, or the caret position if no selection.
Invoked when a window has been closed.
The dimensions of the source image are reported using the setDimensions method call.
Whether or not the drawing buffer has been recently restored from a lost state.
Offset within instance data.
Returns a redirect to append to the specified file. Each write operation first advances the position to the end of the file and then writes the requested data. Whether the advancement of the position and the writing of the data are done in a single atomic operation is system-dependent and therefore unspecified. It will always be true that Redirect.appendTo(file).file() == file && Redirect.appendTo(file).type() == Redirect.Type.APPEND
"Unicode script ""Gujarati""."
The bitmask that indicates that a point lies below this Rectangle2D.
The array index for the inactiveCaptionText system color.
Invoked when a mouse button has been pressed on a Component.
Returns the sample in a specified band for the pixel located at (x,y) as a float. ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds.
Creates a PushbackInputStream with a pushback buffer of the specified size, and saves its argument, the input stream in, for later use. Initially, there is no pushed-back byte (the field pushBack is initialized to -1).
Always returns true because all Windows must be roots of a focus traversal cycle.
The second lowest justification priority.
"Constant for the ""Bopomofo Extended"" Unicode character block."
Sets the type of the window. This method can only be called while the window is not displayable.
The AltGraph key extended modifier constant.
The color dark gray. In the default sRGB space.
Construct a MonitorInfo object.
Constructs an IllegalComponentStateException with the specified detail message. A detail message is a String that describes this particular exception.
Produce the message and include the classname, if present.
The Y coordinate of this RoundRectangle2D.
Checks if the component is contained in the component hierarchy of this container.
Sets the bounding Rectangle of this Rectangle to the specified x, y, width, and height. This method is included for completeness, to parallel the setBounds method of Component.
Any of the family of HSV color spaces.
Gets the nesting BeanContext for this BeanContextChildSupport.
Retrieve cookies associated with given URI, or whose domain matches the given URI. Only cookies that have not expired are returned. This is called for every outgoing HTTP request.
Gets the unit value increment for the adjustable object.
The MediaType instance for ISO/DIN B3, 353 x 500 mm.
Sets the Paint attribute for the Graphics2D context. Calling this method with a null Paint object does not have any effect on the current Paint attribute of this Graphics2D.
The hash code for all Key objects will be the same as the system identity code of the object as defined by the System.identityHashCode() method.
Get the AccessibleAction associated with this object. In the implementation of the Java Accessibility API for this class, return this object, which is responsible for implementing the AccessibleAction interface on behalf of itself.
"Constant for the ""Transport And Map Symbols"" Unicode character block."
ICC Profile Tag Signature: 'desc'.
Translates a character array representation of a BigDecimal into a BigDecimal, accepting the same sequence of characters as the BigDecimal(String) constructor. Note that if the sequence of characters is already available as a character array, using this constructor is faster than converting the char array to string and using the BigDecimal(String) constructor .
Place the component centered along the edge of its display area associated with the start of a page for the current ComponentOrientation. Equal to NORTH for horizontal orientations.
"Constant for the ""Emoticons"" Unicode character block."
Returns the BufferStrategy used by this component. This method will return null if a BufferStrategy has not yet been created or has been disposed.
The type of redirects returned from Redirect.appendTo(File).
Flushes the stream. This will write any buffered output bytes and flush through to the underlying stream.
Sets the requested data array element in the first (default) bank to the given float.
Writes a portion of an array of characters.
"Constant for the ""Tai Le"" Unicode character block."
Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.
Determines if the specified character is permissible as the first character in a Java identifier. A character may start a Java identifier if and only if one of the following conditions is true: isLetter(ch) returns true getType(ch) returns LETTER_NUMBER ch is a currency symbol (such as '$') ch is a connecting punctuation character (such as '_'). Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isJavaIdentifierStart(int) method.
"General category ""Lu"" in the Unicode specification."
Processes focus events occurring on this component by dispatching them to any registered FocusListener objects. This method is not called unless focus events are enabled for this component. Focus events are enabled when one of the following occurs: A FocusListener object is registered via addFocusListener. Focus events are enabled via enableEvents. If focus events are enabled for a Component, the current KeyboardFocusManager determines whether or not a focus event should be dispatched to registered FocusListener objects. If the events are to be dispatched, the KeyboardFocusManager calls the Component's dispatchEvent method, which results in a call to the Component's processFocusEvent method. If focus events are enabled for a Component, calling the Component's dispatchEvent method with a FocusEvent as the argument will result in a call to the Component's processFocusEvent method regardless of the current KeyboardFocusManager. Note that if the event parameter is null the behavior is unspecified and may result in an exception.
Reset stream context. All handles written into stream are reset.
Creates this toolkit's implementation of List using the specified peer interface.
Checks if this Window is showing on screen.
Constructs a Raster with the given SampleModel, DataBuffer, and parent. aRegion specifies the bounding rectangle of the new Raster. When translated into the base Raster's coordinate system, aRegion must be contained by the base Raster. (The base Raster is the Raster's ancestor which has no parent.) sampleModelTranslate specifies the sampleModelTranslateX and sampleModelTranslateY values of the new Raster. Note that this constructor should generally be called by other constructors or create methods, it should not be used directly.
Returns the value of the indexed component in the specified array object, as a short.
Reads up to len bytes of data from this piped input stream into an array of bytes. Less than len bytes will be read if the end of the data stream is reached or if len exceeds the pipe's buffer size. If len is zero, then no bytes are read and 0 is returned; otherwise, the method blocks until at least 1 byte of input is available, end of the stream has been detected, or an exception is thrown.
Produces a method handle for a reflected constructor. The type of the method handle will be that of the constructor, with the return type changed to the declaring class. The method handle will perform a newInstance operation, creating a new instance of the constructor's class on the arguments passed to the method handle. If the constructor's accessible flag is not set, access checking is performed immediately on behalf of the lookup class. The returned method handle will have variable arity if and only if the constructor's variable arity modifier bit (0x0080) is set. If the returned method handle is invoked, the constructor's class will be initialized, if it has not already been initialized.
Constructs an ExceptionInInitializerError with null as its detail message string and with no saved throwable object. A detail message is a String that describes this particular exception.
First tag value.
Returns all samples for a rectangle of pixels in an int array, one sample per array element. ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds.
Returns the end point.
Reads a 64 bit long.
Text antialiasing hint value -- request that text be displayed optimised for an LCD display with subpixels in order from display left to right of R,G,B such that the horizontal subpixel resolution is three times that of the full pixel horizontal resolution (HRGB). This is the most common configuration. Selecting this hint for displays with one of the other LCD subpixel configurations will likely result in unfocused text. Notes: An implementation when choosing whether to apply any of the LCD text hint values may take into account factors including requiring color depth of the destination to be at least 15 bits per pixel (ie 5 bits per color component), characteristics of a font such as whether embedded bitmaps may produce better results, or when displaying to a non-local networked display device enabling it only if suitable protocols are available, or ignoring the hint if performing very high resolution rendering or the target device is not appropriate: eg when printing. These hints can equally be applied when rendering to software images, but these images may not then be suitable for general export, as the text will have been rendered appropriately for a specific subpixel organisation. Also lossy images are not a good choice, nor image formats such as GIF which have limited colors. So unless the image is destined solely for rendering on a display device with the same configuration, some other text anti-aliasing hint such as VALUE_TEXT_ANTIALIAS_ON may be a better choice. Selecting a value which does not match the LCD display in use will likely lead to a degradation in text quality. On display devices (ie CRTs) which do not have the same characteristics as LCD displays, the overall effect may appear similar to standard text anti-aliasing, but the quality may be degraded by color distortion. Analog connected LCD displays may also show little advantage over standard text-antialiasing and be similar to CRTs. In other words for the best results use an LCD display with a digital display connector and specify the appropriate sub-pixel configuration.
The int value representing the private modifier.
Compares two abstract pathnames lexicographically. The ordering defined by this method depends upon the underlying system. On UNIX systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows systems it is not.
Device is a raster screen.
ICC Profile Tag Signature: 'ps2s'.
Returns true if the gradient cycles repeatedly between the two colors C1 and C2.
Draws the outline of an oval. The result is a circle or ellipse that fits within the rectangle specified by the x, y, width, and height arguments. The oval covers an area that is width + 1 pixels wide and height + 1 pixels tall.
Constant for the Previous Candidate function key.
Returns the last Component in the traversal cycle. This method is used to determine the next Component to focus when traversal wraps in the reverse direction.
Returns the starting angle of the arc.
Inserts the string representation of the second int argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method String.valueOf(int), and the characters of that string were then inserted into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.
Constructs an UnknownError with no detail message.
Put the value of the named boolean field into the persistent field.
"Constant for the ""Sharada"" Unicode character block."
Returns the square of the distance from this Point2D to a specified point.
Removes the specified focus listener so it no longer receives focus events from this component.
Creates a zeroed destination Raster with the correct size and number of bands. An IllegalArgumentException may be thrown if the number of bands in the source is incompatible with the matrix. See the class comments for more details.
Convert a hit to a point in standard coordinates. The point is on the baseline of the character at the leading or trailing edge of the character, as appropriate. If the path is broken at the side of the character represented by the hit, the point will be adjacent to the character.
Create an instance using the specified locale
"Returns the name of this enum constant, as contained in the declaration. This method may be overridden, though it typically isn't necessary or desirable. An enum type should override this method when a more ""programmer-friendly"" string form exists."
Entity requesting authentication is a HTTP origin server.
Converts all types, both reference and primitive, to Object. Convenience method for genericMethodType. The expression type.wrap().erase() produces the same value as type.generic().
Adds the specified text event listener to receive text events from this text component. If l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT's threading model.
The event's id.
Sets the size of this Dimension object to the specified width and height. This method is included for completeness, to parallel the setSize method defined by Component.
Returns whether or not the specified data flavor is supported by the encapsulated transferable.
Repaints the component when the image has changed. This imageUpdate method of an ImageObserver is called when more information about an image which had been previously requested using an asynchronous routine such as the drawImage method of Graphics becomes available. See the definition of imageUpdate for more information on this method and its arguments. The imageUpdate method of Component incrementally draws an image on the component as more of the bits of the image are available. If the system property awt.image.incrementaldraw is missing or has the value true, the image is incrementally drawn. If the system property has any other value, then the image is not drawn until it has been completely loaded. Also, if incremental drawing is in effect, the value of the system property awt.image.redrawrate is interpreted as an integer to give the maximum redraw rate, in milliseconds. If the system property is missing or cannot be interpreted as an integer, the redraw rate is once every 100ms. The interpretation of the x, y, width, and height arguments depends on the value of the infoflags argument.
Sets this Rectangle2D to be the same as the specified Rectangle2D.
Returns the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits. (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) Note that right rotation with a negative distance is equivalent to left rotation: rotateRight(val, -distance) == rotateLeft(val, distance). Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative: rotateRight(val, distance) == rotateRight(val, distance & 0x3F).
Returns the color space type of this ColorSpace (for example TYPE_RGB, TYPE_XYZ, ...). The type defines the number of components of the color space and the interpretation, e.g. TYPE_RGB identifies a color space with three components - red, green, and blue. It does not define the particular color characteristics of the space, e.g. the chromaticities of the primaries.
Returns the minimum tile index in the X direction.
A TransformAttribute representing the identity transform.
Indicates mouse button #3; used by getButton().
The Y coordinate of the control point of the quadratic curve segment.
Removes the specified item listener so that it no longer receives item events from this check box menu item. If l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT's threading model.
Returns the descent of this ShapeGraphicAttribute. The descent of a ShapeGraphicAttribute is the distance from the origin of its Shape to the bottom of the bounds of its Shape.
Returns the arc closure type of the arc: OPEN, CHORD, or PIE.
Returns the current x,y position within the child which is displayed at the 0,0 location of the scrolled panel's view port. This is a convenience method which interfaces with the adjustable objects which represent the state of the scrollbars.
Returns the X coordinate of the end point in double precision.
"Returns the persistence delegate for the given type. The persistence delegate is calculated by applying the following rules in order: If a persistence delegate is associated with the given type by using the setPersistenceDelegate(java.lang.Class<?>, java.beans.PersistenceDelegate) method it is returned. A persistence delegate is then looked up by the name composed of the the fully qualified name of the given type and the ""PersistenceDelegate"" postfix. For example, a persistence delegate for the Bean class should be named BeanPersistenceDelegate and located in the same package. public class Bean { ... } public class BeanPersistenceDelegate { ... } The instance of the BeanPersistenceDelegate class is returned for the Bean class. If the type is null, a shared internal persistence delegate is returned that encodes null value. If the type is a enum declaration, a shared internal persistence delegate is returned that encodes constants of this enumeration by their names. If the type is a primitive type or the corresponding wrapper, a shared internal persistence delegate is returned that encodes values of the given type. If the type is an array, a shared internal persistence delegate is returned that encodes an array of the appropriate type and length, and each of its elements as if they are properties. If the type is a proxy, a shared internal persistence delegate is returned that encodes a proxy instance by using the Proxy.newProxyInstance(java.lang.ClassLoader, java.lang.Class<?>[], java.lang.reflect.InvocationHandler) method. If the BeanInfo for this type has a BeanDescriptor which defined a ""persistenceDelegate"" attribute, the value of this named attribute is returned. In all other cases the default persistence delegate is returned. The default persistence delegate assumes the type is a JavaBean, implying that it has a default constructor and that its state may be characterized by the matching pairs of ""setter"" and ""getter"" methods returned by the Introspector class. The default constructor is the constructor with the greatest number of parameters that has the ConstructorProperties annotation. If none of the constructors has the ConstructorProperties annotation, then the nullary constructor (constructor with no parameters) will be used. For example, in the following code fragment, the nullary constructor for the Foo class will be used, while the two-parameter constructor for the Bar class will be used. public class Foo { public Foo() { ... } public Foo(int x) { ... } } public class Bar { public Bar() { ... } @ConstructorProperties({""x""}) public Bar(int x) { ... } @ConstructorProperties({""x"", ""y""}) public Bar(int x, int y) { ... } }"
The Y coordinate of this Point2D.
Returns the type of this Redirect.
Prepares an image for rendering on this component. The image data is downloaded asynchronously in another thread and the appropriate screen representation of the image is generated.
Parses the string argument as a signed decimal long. The characters in the string must all be decimal digits, except that the first character may be an ASCII minus sign '-' (\u002D') to indicate a negative value or an ASCII plus sign '+' ('\u002B') to indicate a positive value. The resulting long value is returned, exactly as if the argument and the radix 10 were given as arguments to the parseLong(java.lang.String, int) method. Note that neither the character L ('\u004C') nor l ('\u006C') is permitted to appear at the end of the string as a type indicator, as would be permitted in Java programming language source code.
Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model. This array can then be passed to the setDataElements method of a WritableRaster object. If the pixel parameter is null, a new array is allocated. Since ComponentColorModel can be subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception if they use an unsupported transferType.
Lays out this container by resizing its child to its preferred size. If the new preferred size of the child causes the current scroll position to be invalid, the scroll position is set to the closest valid position.
Equivalent to valueOf(char[]).
Constructs a ClassCircularityError with no detail message.
Constructs and initializes a Line2D from the specified Point2D objects.
"Weak bidirectional character type ""CS"" in the Unicode specification."
Returns the greater of two double values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.
Constant for the F1 function key.
Constructs a KeyEvent object. This method throws an IllegalArgumentException if source is null.
Tests if the interior of the Shape entirely contains the specified rectangular area. All coordinates that lie inside the rectangular area must lie within the Shape for the entire rectangular area to be considered contained within the Shape. The Shape.contains() method allows a Shape implementation to conservatively return false when: the intersect method returns true and the calculations to determine whether or not the Shape entirely contains the rectangular area are prohibitively expensive. This means that for some Shapes this method might return false even though the Shape contains the rectangular area. The Area class performs more accurate geometric computations than most Shape objects and therefore can be used if a more precise answer is required.
"Returns the number of accessible actions available in this object If there are more than one, the first one is considered the ""default"" action of the object."
Returns hash code for this DataFlavor. For two equal DataFlavors, hash codes are equal. For the String that matches DataFlavor.equals(String), it is not guaranteed that DataFlavor's hash code is equal to the hash code of the String.
Returns the modifier keys for this AWTKeyStroke.
Converts this BigDecimal to a BigInteger. This conversion is analogous to the narrowing primitive conversion from double to long as defined in section 5.1.3 of The Java™ Language Specification: any fractional part of this BigDecimal will be discarded. Note that this conversion can lose information about the precision of the BigDecimal value. To have an exception thrown if the conversion is inexact (in other words if a nonzero fractional part is discarded), use the toBigIntegerExact() method.
"Constant for the ""Ethiopic"" Unicode character block."
"Constant for the ""_"" key."
This CaretPolicy is used when a policy is not specified by the client. With this policy, a hit on a character whose direction is the same as the line direction is stronger than a hit on a counterdirectional character. If the characters' directions are the same, a hit on the leading edge of a character is stronger than a hit on the trailing edge of a character.
Constructs a ClassCircularityError with the specified detail message.
Returns a character sequence that is a subsequence of this sequence. An invocation of this method of the form str.subSequence(begin, end) behaves in exactly the same way as the invocation str.substring(begin, end)
Returns the first control point.
initializeDesktopProperties
"Makes a variable arity adapter which is able to accept any number of trailing positional arguments and collect them into an array argument. The type and behavior of the adapter will be the same as the type and behavior of the target, except that certain invoke and asType requests can lead to trailing positional arguments being collected into target's trailing parameter. Also, the last parameter type of the adapter will be arrayType, even if the target has a different last parameter type. This transformation may return this if the method handle is already of variable arity and its trailing parameter type is identical to arrayType. When called with invokeExact, the adapter invokes the target with no argument changes. (Note: This behavior is different from a fixed arity collector, since it accepts a whole array of indeterminate length, rather than a fixed number of arguments.) When called with plain, inexact invoke, if the caller type is the same as the adapter, the adapter invokes the target as with invokeExact. (This is the normal behavior for invoke when types match.) Otherwise, if the caller and adapter arity are the same, and the trailing parameter type of the caller is a reference type identical to or assignable to the trailing parameter type of the adapter, the arguments and return values are converted pairwise, as if by asType on a fixed arity method handle. Otherwise, the arities differ, or the adapter's trailing parameter type is not assignable from the corresponding caller type. In this case, the adapter replaces all trailing arguments from the original trailing argument position onward, by a new array of type arrayType, whose elements comprise (in order) the replaced arguments. The caller type must provides as least enough arguments, and of the correct type, to satisfy the target's requirement for positional arguments before the trailing array argument. Thus, the caller must supply, at a minimum, N-1 arguments, where N is the arity of the target. Also, there must exist conversions from the incoming arguments to the target's arguments. As with other uses of plain invoke, if these basic requirements are not fulfilled, a WrongMethodTypeException may be thrown. In all cases, what the target eventually returns is returned unchanged by the adapter. In the final case, it is exactly as if the target method handle were temporarily adapted with a fixed arity collector to the arity required by the caller type. (As with asCollector, if the array length is zero, a shared constant may be used instead of a new array. If the implied call to asCollector would throw an IllegalArgumentException or WrongMethodTypeException, the call to the variable arity adapter must throw WrongMethodTypeException.) The behavior of asType is also specialized for variable arity adapters, to maintain the invariant that plain, inexact invoke is always equivalent to an asType call to adjust the target type, followed by invokeExact. Therefore, a variable arity adapter responds to an asType request by building a fixed arity collector, if and only if the adapter and requested type differ either in arity or trailing argument type. The resulting fixed arity collector has its type further adjusted (if necessary) to the requested type by pairwise conversion, as if by another application of asType. When a method handle is obtained by executing an ldc instruction of a CONSTANT_MethodHandle constant, and the target method is marked as a variable arity method (with the modifier bit 0x0080), the method handle will accept multiple arities, as if the method handle constant were created by means of a call to asVarargsCollector. In order to create a collecting adapter which collects a predetermined number of arguments, and whose type reflects this predetermined number, use asCollector instead. No method handle transformations produce new method handles with variable arity, unless they are documented as doing so. Therefore, besides asVarargsCollector, all methods in MethodHandle and MethodHandles will return a method handle with fixed arity, except in the cases where they are specified to return their original operand (e.g., asType of the method handle's own type). Calling asVarargsCollector on a method handle which is already of variable arity will produce a method handle with the same type and behavior. It may (or may not) return the original variable arity method handle. Here is an example, of a list-making variable arity method handle: MethodHandle deepToString = publicLookup() .findStatic(Arrays.class, ""deepToString"", methodType(String.class, Object[].class)); MethodHandle ts1 = deepToString.asVarargsCollector(Object[].class); assertEquals(""[won]"", (String) ts1.invokeExact( new Object[]{""won""})); assertEquals(""[won]"", (String) ts1.invoke( new Object[]{""won""})); assertEquals(""[won]"", (String) ts1.invoke( ""won"" )); assertEquals(""[[won]]"", (String) ts1.invoke((Object) new Object[]{""won""})); // findStatic of Arrays.asList(...) produces a variable arity method handle: MethodHandle asList = publicLookup() .findStatic(Arrays.class, ""asList"", methodType(List.class, Object[].class)); assertEquals(methodType(List.class, Object[].class), asList.type()); assert(asList.isVarargsCollector()); assertEquals(""[]"", asList.invoke().toString()); assertEquals(""[1]"", asList.invoke(1).toString()); assertEquals(""[two, too]"", asList.invoke(""two"", ""too"").toString()); String[] argv = { ""three"", ""thee"", ""tee"" }; assertEquals(""[three, thee, tee]"", asList.invoke(argv).toString()); assertEquals(""[three, thee, tee]"", asList.invoke((Object[])argv).toString()); List ls = (List) asList.invoke((Object)argv); assertEquals(1, ls.size()); assertEquals(""[three, thee, tee]"", Arrays.toString((Object[])ls.get(0))); Discussion: These rules are designed as a dynamically-typed variation of the Java rules for variable arity methods. In both cases, callers to a variable arity method or method handle can either pass zero or more positional arguments, or else pass pre-collected arrays of any length. Users should be aware of the special role of the final argument, and of the effect of a type match on that final argument, which determines whether or not a single trailing argument is interpreted as a whole array or a single element of an array to be collected. Note that the dynamic type of the trailing argument has no effect on this decision, only a comparison between the symbolic type descriptor of the call site and the type descriptor of the method handle.)"
Parses the string argument as an unsigned decimal long. The characters in the string must all be decimal digits, except that the first character may be an an ASCII plus sign '+' ('\u002B'). The resulting integer value is returned, exactly as if the argument and the radix 10 were given as arguments to the parseUnsignedLong(java.lang.String, int) method.
The unit increment adjustment type.
Enable/disable SO_BROADCAST. Some operating systems may require that the Java virtual machine be started with implementation specific privileges to enable this option or send broadcast datagrams.
Returns a DirectColorModel that describes the default format for integer RGB values used in many of the methods in the AWT image interfaces for the convenience of the programmer. The color space is the default ColorSpace, sRGB. The format for the RGB values is an integer with 8 bits each of alpha, red, green, and blue color components ordered correspondingly from the most significant byte to the least significant byte, as in: 0xAARRGGBB. Color components are not premultiplied by the alpha component. This format does not necessarily represent the native or the most efficient ColorModel for a particular device or for all images. It is merely used as a common color model format.
Sets the foreground color of this component.
Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable. If this Executable object represents a constructor, the AnnotatedType object represents the type of the constructed object. If this Executable object represents a method, the AnnotatedType object represents the use of a type to specify the return type of the method.
Get the signature of the primary functional interface method after type variables are substituted with their instantiation from the capture site.
Get the AccessibleValue associated with this object. In the implementation of the Java Accessibility API for this class, return this object, which is responsible for implementing the AccessibleValue interface on behalf of itself.
AlphaComposite object that implements the opaque SRC_IN rule with an alpha of 1.0f.
Returns the advance of this ImageGraphicAttribute. The advance of an ImageGraphicAttribute is the distance from the origin to the right edge of the image.
Releases a BeanContextChild's (or any arbitrary object associated with a BeanContextChild) reference to the specified service by calling releaseService() on the underlying BeanContextServiceProvider.
The index one greater than the index of the last valid byte in the buffer. This value is always in the range 0 through buf.length; elements buf[0] through buf[count-1] contain buffered input data obtained from the underlying input stream.
Gets the AccessibleContext associated with this Dialog. For dialogs, the AccessibleContext takes the form of an AccessibleAWTDialog. A new AccessibleAWTDialog instance is created if necessary.
Creates an opaque sRGB color with the specified combined RGB value consisting of the red component in bits 16-23, the green component in bits 8-15, and the blue component in bits 0-7. The actual color used in rendering depends on finding the best match given the color space available for a particular output device. Alpha is defaulted to 255.
Creates the scroll pane's peer.
"Throws a SecurityException if the calling thread is not allowed to read from the specified file descriptor. This method calls checkPermission with the RuntimePermission(""readFileDescriptor"") permission. If you override this method, then you should make a call to super.checkRead at the point the overridden method would normally throw an exception."
Inverse transforms an array of double precision coordinates by this transform. The two coordinate array sections can be exactly the same or can be overlapping sections of the same array without affecting the validity of the results. This method ensures that no source coordinates are overwritten by a previous operation before they can be transformed. The coordinates are stored in the arrays starting at the specified offset in the order [x0, y0, x1, y1, ..., xn, yn].
Releases for normal dispatching to the current focus owner all KeyEvents which were enqueued because of a call to enqueueKeyEvents with the same timestamp and Component. If the given timestamp is less than zero, the outstanding enqueue request for the given Component with the oldest timestamp (if any) should be cancelled.
Transforms an array of point objects by this transform. If any element of the ptDst array is null, a new Point2D object is allocated and stored into that element before storing the results of the transformation. Note that this method does not take any precautions to avoid problems caused by storing results into Point2D objects that will be used as the source for calculations further down the source array. This method does guarantee that if a specified Point2D object is both the source and destination for the same single point transform operation then the results will not be stored until the calculations are complete to avoid storing the results on top of the operands. If, however, the destination Point2D object for one operation is the same object as the source Point2D object for another operation further down the source array then the original coordinates in that point are overwritten before they can be converted.
Constructs a short-based DataBuffer with the specified number of banks all of which are the specified size.
Ends any input composition that may currently be going on in this context. Depending on the platform and possibly user preferences, this may commit or delete uncommitted text. Any changes to the text are communicated to the active component using an input method event. A text editing component may call this in a variety of situations, for example, when the user moves the insertion point within the text (but outside the composed text), or when the component's text is saved to a file or copied to the clipboard. This method is called by InputContext.endComposition, by InputContext.dispatchEvent when switching to a different client component when switching from this input method to a different one using the user interface or InputContext.selectInputMethod.
Returns true if the representation class can be serialized.
Returns the first event with the specified id, if any.
Gets the number of columns in this layout.
Tests if the interior of the Shape entirely contains the specified rectangular area. All coordinates that lie inside the rectangular area must lie within the Shape for the entire rectangular area to be considered contained within the Shape. The Shape.contains() method allows a Shape implementation to conservatively return false when: the intersect method returns true and the calculations to determine whether or not the Shape entirely contains the rectangular area are prohibitively expensive. This means that for some Shapes this method might return false even though the Shape contains the rectangular area. The Area class performs more accurate geometric computations than most Shape objects and therefore can be used if a more precise answer is required.
Represents an image with 8-bit RGBA color components with the colors Blue, Green, and Red stored in 3 bytes and 1 byte of alpha. The image has a ComponentColorModel with alpha. The color data in this image is considered to be premultiplied with alpha. The byte data is interleaved in a single byte array in the order A, B, G, R from lower to higher byte addresses within each pixel.
"Returns the number of zero bits following the lowest-order (""rightmost"") one-bit in the two's complement binary representation of the specified int value. Returns 32 if the specified value has no one-bits in its two's complement representation, in other words if it is equal to zero."
Returns the current focus cycle root, even if the calling thread is in a different context than the current focus cycle root. If the focus owner is itself a focus cycle root, then it may be ambiguous as to which Components represent the next and previous Components to focus during normal focus traversal. In that case, the current focus cycle root is used to differentiate among the possibilities.
Sets the Cursor of this object. The method may have no visual effect if the Java platform implementation and/or the native system do not support changing the mouse cursor shape.
The overall height of the full ellipse of which this arc is a partial section (not considering the angular extents).
"Makes an array-spreading method handle, which accepts a trailing array argument and spreads its elements as positional arguments. The new method handle adapts, as its target, the current method handle. The type of the adapter will be the same as the type of the target, except that the final arrayLength parameters of the target's type are replaced by a single array parameter of type arrayType. If the array element type differs from any of the corresponding argument types on the original target, the original target is adapted to take the array elements directly, as if by a call to asType. When called, the adapter replaces a trailing array argument by the array's elements, each as its own argument to the target. (The order of the arguments is preserved.) They are converted pairwise by casting and/or unboxing to the types of the trailing parameters of the target. Finally the target is called. What the target eventually returns is returned unchanged by the adapter. Before calling the target, the adapter verifies that the array contains exactly enough elements to provide a correct argument count to the target method handle. (The array may also be null when zero elements are required.) If, when the adapter is called, the supplied array argument does not have the correct number of elements, the adapter will throw an IllegalArgumentException instead of invoking the target. Here are some simple examples of array-spreading method handles: MethodHandle equals = publicLookup() .findVirtual(String.class, ""equals"", methodType(boolean.class, Object.class)); assert( (boolean) equals.invokeExact(""me"", (Object)""me"")); assert(!(boolean) equals.invokeExact(""me"", (Object)""thee"")); // spread both arguments from a 2-array: MethodHandle eq2 = equals.asSpreader(Object[].class, 2); assert( (boolean) eq2.invokeExact(new Object[]{ ""me"", ""me"" })); assert(!(boolean) eq2.invokeExact(new Object[]{ ""me"", ""thee"" })); // try to spread from anything but a 2-array: for (int n = 0; n <= 10; n++) { Object[] badArityArgs = (n == 2 ? null : new Object[n]); try { assert((boolean) eq2.invokeExact(badArityArgs) && false); } catch (IllegalArgumentException ex) { } // OK } // spread both arguments from a String array: MethodHandle eq2s = equals.asSpreader(String[].class, 2); assert( (boolean) eq2s.invokeExact(new String[]{ ""me"", ""me"" })); assert(!(boolean) eq2s.invokeExact(new String[]{ ""me"", ""thee"" })); // spread second arguments from a 1-array: MethodHandle eq1 = equals.asSpreader(Object[].class, 1); assert( (boolean) eq1.invokeExact(""me"", new Object[]{ ""me"" })); assert(!(boolean) eq1.invokeExact(""me"", new Object[]{ ""thee"" })); // spread no arguments from a 0-array or null: MethodHandle eq0 = equals.asSpreader(Object[].class, 0); assert( (boolean) eq0.invokeExact(""me"", (Object)""me"", new Object[0])); assert(!(boolean) eq0.invokeExact(""me"", (Object)""thee"", (Object[])null)); // asSpreader and asCollector are approximate inverses: for (int n = 0; n <= 2; n++) { for (Class<?> a : new Class<?>[]{Object[].class, String[].class, CharSequence[].class}) { MethodHandle equals2 = equals.asSpreader(a, n).asCollector(a, n); assert( (boolean) equals2.invokeWithArguments(""me"", ""me"")); assert(!(boolean) equals2.invokeWithArguments(""me"", ""thee"")); } } MethodHandle caToString = publicLookup() .findStatic(Arrays.class, ""toString"", methodType(String.class, char[].class)); assertEquals(""[A, B, C]"", (String) caToString.invokeExact(""ABC"".toCharArray())); MethodHandle caString3 = caToString.asCollector(char[].class, 3); assertEquals(""[A, B, C]"", (String) caString3.invokeExact('A', 'B', 'C')); MethodHandle caToString2 = caString3.asSpreader(char[].class, 2); assertEquals(""[A, B, C]"", (String) caToString2.invokeExact('A', ""BC"".toCharArray()));"
Do not allow the line to be justified.
"Determines whether this check box is in the ""on"" or ""off"" state. The boolean value true indicates the ""on"" state, and false indicates the ""off"" state."
Constructs a LinkageError with the specified detail message and cause.
Returns a parameter string identifying this text event. This method is useful for event-logging and for debugging.
Returns the width of the framing rectangle in double precision.
Get the accessible name of this object.
"Throws a SecurityException if the calling thread is not allowed to access the package specified by the argument. This method is used by the loadClass method of class loaders. This method first gets a list of restricted packages by obtaining a comma-separated list from a call to java.security.Security.getProperty(""package.access""), and checks to see if pkg starts with or equals any of the restricted packages. If it does, then checkPermission gets called with the RuntimePermission(""accessClassInPackage.""+pkg) permission. If this method is overridden, then super.checkPackageAccess should be called as the first line in the overridden method."
Returns the precision of this BigDecimal. (The precision is the number of digits in the unscaled value.) The precision of a zero value is 1.
Constructs an instance of this class.
Tests if the line segment from (x1,y1) to (x2,y2) intersects the line segment from (x3,y3) to (x4,y4).
Returns the trigonometric tangent of an angle. Special cases: If the argument is NaN or an infinity, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.
Constructs a GlyphMetrics object.
Returns true if raster is compatible with this ColorModel or false if it is not compatible with this ColorModel.
Creates a newly allocated string. Its size is the current size of the output stream and the valid contents of the buffer have been copied into it. Each character c in the resulting string is constructed from the corresponding element b in the byte array such that: c == (char)(((hibyte & 0xff) << 8) | (b & 0xff))
Transforms the specified ptSrc and stores the result in ptDst. If ptDst is null, a new Point2D object is allocated and then the result of the transformation is stored in this object. In either case, ptDst, which contains the transformed point, is returned for convenience. If ptSrc and ptDst are the same object, the input point is correctly overwritten with the transformed point.
Removes the specified component listener so that it no longer receives component events from this component. This method performs no function, nor does it throw an exception, if the listener specified by the argument was not previously added to this component. If listener l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT's threading model.
Gets all JavaBean or BeanContext instances currently nested in this BeanContext.
Sets the human presentable name for the data format that this DataFlavor represents. This name would be localized for different countries.
Lays out the grid. This method should only be used internally by GridBagLayout.
Marks the last integer id for the range of paint event ids.
Returns the bounding rectangle of the current clipping area. This method refers to the user clip, which is independent of the clipping associated with device bounds and window visibility. If no clip has previously been set, or if the clip has been cleared using setClip(null), this method returns null. The coordinates in the rectangle are relative to the coordinate system origin of this graphics context.
Return the system default cursor.
The event id indicating that modification was made to the entire hierarchy tree.
Invoked when the mouse enters a component.
Returns a BigInteger whose value is the absolute value of this BigInteger.
Creates the peer of the button. The button's peer allows the application to change the look of the button without changing its functionality.
Public default constructor.
Returns whether the text range is selected.
"Constant for the ""Modifier Tone Letters"" Unicode character block."
Adds the specified input method listener to receive input method events from this component. A component will only receive input method events from input methods if it also overrides getInputMethodRequests to return an InputMethodRequests instance. If listener l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT's threading model.
Creates a TextHitInfo on the other side of the insertion point. This TextHitInfo remains unchanged.
Write a single character.
This method returns the user drop action.
The part of the destination lying outside of the source replaces the destination (Porter-Duff Destination Held Out By Source rule). Fs = 0 and Fd = (1-As), thus: Ar = Ad*(1-As) Cr = Cd*(1-As)
Constructor to create a new NotActiveException with the reason given.
Creates a new decoder to parse XML archives created by the XMLEncoder class. If the input source is is null, no exception is thrown and no parsing is performed. This behavior is similar to behavior of other constructors that use InputStream as a parameter.
Reads up to len bytes of data from this input stream into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned. This method simply performs in.read(b, off, len) and returns the result.
The int value representing the volatile modifier.
Get the request method.
This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is not known in advance. In this mode, chunked transfer encoding is used to send the request body. Note, not all HTTP servers support this mode. When output streaming is enabled, authentication and redirection cannot be handled automatically. A HttpRetryException will be thrown when reading the response if authentication or redirection are required. This exception can be queried for the details of the error. This method must be called before the URLConnection is connected.
Gets the index of the selected item on the list,
Sets a sample in the specified band for the pixel located at (x, y) in the DataBuffer using an int for input. An ArrayIndexOutOfBoundsException is thrown if the coordinates are not in bounds.
Create a new line-numbering reader, reading characters into a buffer of the given size.
"Stores the bounds of this component into ""return value"" rv and return rv. If rv is null a new Rectangle is allocated. This version of getBounds is useful if the caller wants to avoid allocating a new Rectangle object on the heap."
Returns the index within this sequence that is offset from the given index by codePointOffset code points. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each.
Returns the value of this Long as a short after a narrowing primitive conversion.
"Strong bidirectional character type ""R"" in the Unicode specification."
"Unicode script ""Buhid""."
Returns the parent WritableRaster (if any) of this WritableRaster, or else null.
Returns the current offset in this file.
The color gray. In the default sRGB space.
Ease-of-use constant for getAlignmentY(). Specifies an alignment to the top of the component.
Invoked when a window is de-iconified.
"Baseline data. Table tag ""BASE"" in the Open Type Specification."
Creates a new character-stream writer whose critical sections will synchronize on the given object.
Put the component at the top-left corner of its display area.
Returns the hit for the next caret to the left (top); if no such hit, returns null. The hit is to the left of the strong caret at the specified offset, as determined by the default policy. The returned hit is the stronger of the two possible hits, as determined by the default policy.
"Constant for the ""Block Elements"" Unicode character block."
Formal parameter declaration
"Adds a PropertyChangeListener to the listener list for a specific property. The specified property may be user-defined, or one of the following defaults: this Container's font (""font"") this Container's background color (""background"") this Container's foreground color (""foreground"") this Container's focusability (""focusable"") this Container's focus traversal keys enabled state (""focusTraversalKeysEnabled"") this Container's Set of FORWARD_TRAVERSAL_KEYS (""forwardFocusTraversalKeys"") this Container's Set of BACKWARD_TRAVERSAL_KEYS (""backwardFocusTraversalKeys"") this Container's Set of UP_CYCLE_TRAVERSAL_KEYS (""upCycleFocusTraversalKeys"") this Container's Set of DOWN_CYCLE_TRAVERSAL_KEYS (""downCycleFocusTraversalKeys"") this Container's focus traversal policy (""focusTraversalPolicy"") this Container's focus-cycle-root state (""focusCycleRoot"") this Container's focus-traversal-policy-provider state(""focusTraversalPolicyProvider"") this Container's focus-traversal-policy-provider state(""focusTraversalPolicyProvider"") Note that if this Container is inheriting a bound property, then no event will be fired in response to a change in the inherited property. If listener is null, no exception is thrown and no action is performed."
Returns the nth Accessible child of the object.
"Constant for the ""Latin Extended-C"" Unicode character block."
Minimum exponent a normalized double variable may have. It is equal to the value returned by Math.getExponent(Double.MIN_NORMAL).
Returns this element's annotation for the specified type if such an annotation is present, else null.
Removes the specified item listener so that it no longer receives item events from this Choice menu. If l is null, no exception is thrown and no action is performed. Refer to AWT Threading Issues for details on AWT's threading model.
"Constant for the ""Arabic"" Unicode character block."
Sets the background color for the Graphics2D context. The background color is used for clearing a region. When a Graphics2D is constructed for a Component, the background color is inherited from the Component. Setting the background color in the Graphics2D context only affects the subsequent clearRect calls and not the background color of the Component. To change the background of the Component, use appropriate methods of the Component.
Transforms an array of floating point coordinates by this transform. The two coordinate array sections can be exactly the same or can be overlapping sections of the same array without affecting the validity of the results. This method ensures that no source coordinates are overwritten by a previous operation before they can be transformed. The coordinates are stored in the arrays starting at the specified offset in the order [x0, y0, x1, y1, ..., xn, yn].
Returns this element's annotation for the specified type if such an annotation is directly present, else null. This method ignores inherited annotations. (Returns null if no annotations are directly present on this element.)
Returns an array of all the hierarchy listeners registered on this component.
Finds or creates an instance of the given method type.
Retrieve the TTL (time-to-live) option.
Updates this component. If this component is not a lightweight component, the AWT calls the update method in response to a call to repaint. You can assume that the background is not cleared. The update method of Component calls this component's paint method to redraw this component. This method is commonly overridden by subclasses which need to do additional work in response to a call to repaint. Subclasses of Component that override this method should either call super.update(g), or call paint(g) directly from their update method. The origin of the graphics context, its (0, 0) coordinate point, is the top-left corner of this component. The clipping region of the graphics context is the bounding rectangle of this component. Note: For more information on the paint mechanisms utilitized by AWT and Swing, including information on how to write the most efficient painting code, see Painting in AWT and Swing.
The MediaType instance for JIS B7, 91 x 128 mm.
Possible value for the anchor field. Specifies that the component should be horizontally placed along the trailing edge. For components with a left-to-right orientation, the trailing edge is the right edge. Vertically the component is positioned so that its top edge touches the baseline of the starting row. If the starting row does not have a baseline it will be vertically centered.
"Returns an array of all the listeners that were added to the PropertyChangeSupport object with addPropertyChangeListener(). If some listeners have been added with a named property, then the returned array will be a mixture of PropertyChangeListeners and PropertyChangeListenerProxys. If the calling method is interested in distinguishing the listeners then it must test each element to see if it's a PropertyChangeListenerProxy, perform the cast, and examine the parameter. PropertyChangeListener[] listeners = bean.getPropertyChangeListeners(); for (int i = 0; i < listeners.length; i++) { if (listeners[i] instanceof PropertyChangeListenerProxy) { PropertyChangeListenerProxy proxy = (PropertyChangeListenerProxy)listeners[i]; if (proxy.getPropertyName().equals(""foo"")) { // proxy is a PropertyChangeListener which was associated // with the property named ""foo"" } } }"
Writes a string to the file as a sequence of characters. Each character is written to the data output stream as if by the writeChar method. The write starts at the current position of the file pointer.
Constructs a WindowEvent object. This method throws an IllegalArgumentException if source is null.
One pre-defined policy which accepts no cookies.
Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface. Transparent pixels do not affect whatever pixels are already there. This method returns immediately in all cases, even if the image area to be drawn has not yet been scaled, dithered, and converted for the current output device. If the current output representation is not yet complete then drawImage returns false. As more of the image becomes available, the process that loads the image notifies the specified image observer. This method always uses the unscaled version of the image to render the scaled rectangle and performs the required scaling on the fly. It does not use a cached, scaled version of the image for this operation. Scaling of the image from source to destination is performed such that the first coordinate of the source rectangle is mapped to the first coordinate of the destination rectangle, and the second source coordinate is mapped to the second destination coordinate. The subimage is scaled and flipped as needed to preserve those mappings.
Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the underlying output stream as an 8-byte quantity, high byte first. If no exception is thrown, the counter written is incremented by 8.
Closes the input stream. Must be called to release any resources associated with the stream.
"Returns a string representation of this stack trace element. The format of this string depends on the implementation, but the following examples may be regarded as typical: ""MyClass.mash(MyClass.java:9)"" - Here, ""MyClass"" is the fully-qualified name of the class containing the execution point represented by this stack trace element, ""mash"" is the name of the method containing the execution point, ""MyClass.java"" is the source file containing the execution point, and ""9"" is the line number of the source line containing the execution point. ""MyClass.mash(MyClass.java)"" - As above, but the line number is unavailable. ""MyClass.mash(Unknown Source)"" - As above, but neither the file name nor the line number are available. ""MyClass.mash(Native Method)"" - As above, but neither the file name nor the line number are available, and the method containing the execution point is known to be a native method."
Returns this process builder's standard error destination. Subprocesses subsequently started by this object's start() method redirect their standard error to this destination. The initial value is Redirect.PIPE.
Returns the memory usage of the memory pool when this notification was constructed.
Gets the array of children affected by this event.
Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to iterate over the constants as follows: for (Thread.State c : Thread.State.values()) System.out.println(c);
Flag indicating that media is currently being loaded.
Prepares an image for rendering. If the values of the width and height arguments are both -1, this method prepares the image for rendering on the default screen; otherwise, this method prepares an image for rendering on the default screen at the specified width and height. The image data is downloaded asynchronously in another thread, and an appropriately scaled screen representation of the image is generated. This method is called by components prepareImage methods. Information on the flags returned by this method can be found with the definition of the ImageObserver interface.
Produce the message and include the message from the nested exception, if there is one.
Any of the family of RGB color spaces.
"Weak bidirectional character type ""AN"" in the Unicode specification."
The segment type constant for a point that specifies the starting location for a new subpath.
The BeanContext in which this BeanContextChild is nested.
"Unicode script ""Greek""."
Returns the Java language modifiers for the executable represented by this object.
Constant for the Roman Characters function key.
Constructs a BandedSampleModel with the specified parameters. The number of bands will be inferred from the lengths of the bandOffsets bankIndices arrays, which must be equal. The pixel stride will be one data element.
"Returns the index within this string of the rightmost occurrence of the specified substring. The rightmost empty string """" is considered to occur at the index value this.length(). The returned index is the largest value k such that this.toString().startsWith(str, k) is true."
Returns a parameter string identifying this event. This method is useful for event logging and for debugging.
Returns the index within this string of the first occurrence of the specified substring. The returned index is the smallest value k for which: this.startsWith(str, k) If no such value of k exists, then -1 is returned.
Performs a convolution on BufferedImages. Each component of the source image will be convolved (including the alpha component, if present). If the color model in the source image is not the same as that in the destination image, the pixels will be converted in the destination. If the destination image is null, a BufferedImage will be created with the source ColorModel. The IllegalArgumentException may be thrown if the source is the same as the destination.
Concatenates this transform with a shearing transformation. This is equivalent to calling concatenate(SH), where SH is an AffineTransform represented by the following matrix: [ 1 shx 0 ] [ shy 1 0 ] [ 0 0 1 ]
The array index for the window system color.
Returns the number of characters represented by this TextLayout.
"Unicode script ""Ogham""."
Returns a new Font using the specified font type and input data. The new Font is created with a point size of 1 and style PLAIN. This base font can then be used with the deriveFont methods in this class to derive new Font objects with varying sizes, styles, transforms and font features. This method does not close the InputStream. To make the Font available to Font constructors the returned Font must be registered in the GraphicsEnviroment by calling registerFont(Font).
Invoked when the Window is set to be the focused Window, which means that the Window, or one of its subcomponents, will receive keyboard events.
Inserts the string representation of the char array argument into this sequence. The characters of the array argument are inserted into the contents of this sequence at the position indicated by offset. The length of this sequence increases by the length of the argument. The overall effect is exactly as if the second argument were converted to a string by the method String.valueOf(char[]), and the characters of that string were then inserted into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.
An int used by updateCurrentCursor() indicating that the Cursor is over a DropTarget.
Reads up to byte.length bytes of data from this input stream into an array of bytes. This method blocks until some input is available. This method simply performs the call read(b, 0, b.length) and returns the result. It is important that it does not do in.read(b) instead; certain subclasses of FilterInputStream depend on the implementation strategy actually used.
Returns a WritableRaster representing the alpha channel for BufferedImage objects with ColorModel objects that support a separate spatial alpha channel, such as ComponentColorModel and DirectColorModel. Returns null if there is no alpha channel associated with the ColorModel in this image. This method assumes that for all ColorModel objects other than IndexColorModel, if the ColorModel supports alpha, there is a separate alpha channel which is stored as the last band of image data. If the image uses an IndexColorModel that has alpha in the lookup table, this method returns null since there is no spatially discrete alpha channel. This method creates a new WritableRaster, but shares the data array.
Moves and resizes this component. The new location of the top-left corner is specified by x and y, and the new size is specified by width and height. This method changes layout-related information, and therefore, invalidates the component hierarchy. The width or height values are automatically enlarged if either is less than the minimum size as specified by previous call to setMinimumSize. The method changes the geometry-related data. Therefore, the native windowing system may ignore such requests, or it may modify the requested data, so that the Window object is placed and sized in a way that corresponds closely to the desktop settings.
A direct method handle reference kind, as defined in the table above.
Ensures that the close method of this file input stream is called when there are no more references to it.
Reads the next byte of data from this input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This read method cannot block.
Invokes the underlying method represented by this Method object, on the specified object with the specified parameters. Individual parameters are automatically unwrapped to match primitive formal parameters, and both primitive and reference parameters are subject to method invocation conversions as necessary. If the underlying method is static, then the specified obj argument is ignored. It may be null. If the number of formal parameters required by the underlying method is 0, the supplied args array may be of length 0 or null. If the underlying method is an instance method, it is invoked using dynamic method lookup as documented in The Java Language Specification, Second Edition, section 15.12.4.4; in particular, overriding based on the runtime type of the target object will occur. If the underlying method is static, the class that declared the method is initialized if it has not already been initialized. If the method completes normally, the value it returns is returned to the caller of invoke; if the value has a primitive type, it is first appropriately wrapped in an object. However, if the value has the type of an array of a primitive type, the elements of the array are not wrapped in objects; in other words, an array of primitive type is returned. If the underlying method return type is void, the invocation returns null.
Constant for the F6 function key.
Returns true if and only if the designated bit is set. (Computes ((this & (1<<n)) != 0).)
"Embedded bitmap scaling. Table tag ""EBSC"" in the Open Type Specification."
Returns the permanent focus owner, even if the calling thread is in a different context than the permanent focus owner. The permanent focus owner is defined as the last Component in an application to receive a permanent FOCUS_GAINED event. The focus owner and permanent focus owner are equivalent unless a temporary focus change is currently in effect. In such a situation, the permanent focus owner will again be the focus owner when the temporary focus change ends.
Returns a shared instance of an AWTKeyStroke that represents a KEY_TYPED event for the specified character.
The index of the position in the circular buffer at which the next byte of data will be read by this piped input stream.
Constructs an InputMethodEvent with the specified source component, type, caret, and visiblePosition. The text is set to null, committedCharacterCount to 0. The offsets of caret and visiblePosition are relative to the current composed text; that is, the composed text within the text of the preceding INPUT_METHOD_TEXT_CHANGED event if the event being constructed as a CARET_POSITION_CHANGED event. For an INPUT_METHOD_TEXT_CHANGED event without text, caret and visiblePosition must be null. The time stamp for this event is initialized by invoking EventQueue.getMostRecentEventTime(). Note that passing in an invalid id results in unspecified behavior. This method throws an IllegalArgumentException if source is null.
Returns the parameter type at the specified index, within this method type.
Returns the SampleModel associated with this BufferedImage.
Returns a BigDecimal whose value is (this - subtrahend), and whose scale is max(this.scale(), subtrahend.scale()).
A constant holding a Not-a-Number (NaN) value of type float. It is equivalent to the value returned by Float.intBitsToFloat(0x7fc00000).
Called whenever the mouse is moved during a drag operation.
Returns true if this cookie contains the HttpOnly attribute. This means that the cookie should not be accessible to scripting engines, like javascript.
Writes the string to the file as a sequence of bytes. Each character in the string is written out, in sequence, by discarding its high eight bits. The write starts at the current position of the file pointer.
Returns the largest Y coordinate of the framing rectangle of the Shape in double precision.
Any of the family of HLS color spaces.
The writeObject is a single entry point to the persistence and is used by a Encoder in the traditional mode of delegation. Although this method is not final, it should not need to be subclassed under normal circumstances. This implementation first checks to see if the stream has already encountered this object. Next the mutatesTo method is called to see if that candidate returned from the stream can be mutated into an accurate copy of oldInstance. If it can, the initialize method is called to perform the initialization. If not, the candidate is removed from the stream, and the instantiate method is called to create a new candidate for this object.
"Returns the string representation of this BigDecimal, using scientific notation if an exponent is needed. A standard canonical string form of the BigDecimal is created as though by the following steps: first, the absolute value of the unscaled value of the BigDecimal is converted to a string in base ten using the characters '0' through '9' with no leading zeros (except if its value is zero, in which case a single '0' character is used). Next, an adjusted exponent is calculated; this is the negated scale, plus the number of characters in the converted unscaled value, less one. That is, -scale+(ulength-1), where ulength is the length of the absolute value of the unscaled value in decimal digits (its precision). If the scale is greater than or equal to zero and the adjusted exponent is greater than or equal to -6, the number will be converted to a character form without using exponential notation. In this case, if the scale is zero then no decimal point is added and if the scale is positive a decimal point will be inserted with the scale specifying the number of characters to the right of the decimal point. '0' characters are added to the left of the converted unscaled value as necessary. If no character precedes the decimal point after this insertion then a conventional '0' character is prefixed. Otherwise (that is, if the scale is negative, or the adjusted exponent is less than -6), the number will be converted to a character form using exponential notation. In this case, if the converted BigInteger has more than one digit a decimal point is inserted after the first digit. An exponent in character form is then suffixed to the converted unscaled value (perhaps with inserted decimal point); this comprises the letter 'E' followed immediately by the adjusted exponent converted to a character form. The latter is in base ten, using the characters '0' through '9' with no leading zeros, and is always prefixed by a sign character '-' ('\u002D') if the adjusted exponent is negative, '+' ('\u002B') otherwise). Finally, the entire string is prefixed by a minus sign character '-' ('\u002D') if the unscaled value is less than zero. No sign character is prefixed if the unscaled value is zero or positive. Examples: For each representation [unscaled value, scale] on the left, the resulting string is shown on the right. [123,0] ""123"" [-123,0] ""-123"" [123,-1] ""1.23E+3"" [123,-3] ""1.23E+5"" [123,1] ""12.3"" [123,5] ""0.00123"" [123,10] ""1.23E-8"" [-123,12] ""-1.23E-10"" Notes: There is a one-to-one mapping between the distinguishable BigDecimal values and the result of this conversion. That is, every distinguishable BigDecimal value (unscaled value and scale) has a unique string representation as a result of using toString. If that string representation is converted back to a BigDecimal using the BigDecimal(String) constructor, then the original value will be recovered. The string produced for a given number is always the same; it is not affected by locale. This means that it can be used as a canonical string representation for exchanging decimal data, or as a key for a Hashtable, etc. Locale-sensitive number formatting and parsing is handled by the NumberFormat class and its subclasses. The toEngineeringString() method may be used for presenting numbers with exponents in engineering notation, and the setScale method may be used for rounding a BigDecimal so it has a known number of digits after the decimal point. The digit-to-character mapping provided by Character.forDigit is used."
Returns the approximate accumulated elapsed time (in milliseconds) spent in compilation. If multiple threads are used for compilation, this value is summation of the approximate time that each thread spent in compilation. This method is optionally supported by the platform. A Java virtual machine implementation may not support the compilation time monitoring. The isCompilationTimeMonitoringSupported() method can be used to determine if the Java virtual machine supports this operation. This value does not indicate the level of performance of the Java virtual machine and is not intended for performance comparisons of different virtual machine implementations. The implementations may have different definitions and different measurements of the compilation time.
Retrieves the language-sensitive orientation that is to be used to order the elements or text within this component. LayoutManager and Component subclasses that wish to respect orientation should call this method to get the component's orientation before performing layout or drawing.
Creates a zeroed destination Raster with the correct size and number of bands. The IllegalArgumentException may be thrown if the source Raster is incompatible with the types of Rasters allowed by the class implementing this filter.
"Executes the specified command and arguments in a separate process with the specified environment and working directory. Given an array of strings cmdarray, representing the tokens of a command line, and an array of strings envp, representing ""environment"" variable settings, this method creates a new process in which to execute the specified command. This method checks that cmdarray is a valid operating system command. Which commands are valid is system-dependent, but at the very least the command must be a non-empty list of non-null strings. If envp is null, the subprocess inherits the environment settings of the current process. A minimal set of system dependent environment variables may be required to start a process on some operating systems. As a result, the subprocess may inherit additional environment variable settings beyond those in the specified environment. ProcessBuilder.start() is now the preferred way to start a process with a modified environment. The working directory of the new subprocess is specified by dir. If dir is null, the subprocess inherits the current working directory of the current process. If a security manager exists, its checkExec method is invoked with the first component of the array cmdarray as its argument. This may result in a SecurityException being thrown. Starting an operating system process is highly system-dependent. Among the many things that can go wrong are: The operating system program file was not found. Access to the program file was denied. The working directory does not exist. In such cases an exception will be thrown. The exact nature of the exception is system-dependent, but it will always be a subclass of IOException."
Fills the polygon defined by the specified Polygon object with the graphics context's current color. The area inside the polygon is defined using an even-odd fill rule, also known as the alternating rule.
Gets the number of copies to be printed.
This method returns an int representing the current actions this DropTarget will accept.
Returns the name of this enum constant, exactly as declared in its enum declaration. Most programmers should use the toString() method in preference to this one, as the toString method may return a more user-friendly name. This method is designed primarily for use in specialized situations where correctness depends on getting the exact name, which will not vary from release to release.
Returns a String object representing the specified long. The argument is converted to signed decimal representation and returned as a string, exactly as if the argument and the radix 10 were given as arguments to the toString(long, int) method.
Creates an audio clip.
"The DataFlavor representing a Java Unicode String class, where: representationClass = java.lang.String mimeType = ""application/x-java-serialized-object"""
Determines if the object is visible. Note: this means that the object intends to be visible; however, it may not in fact be showing on the screen because one of the objects that this object is contained by is not visible. To determine if an object is showing on the screen, use isShowing.
Returns a hash code value for the object. See Object.hashCode() for a complete description.
Get the role of this object.
Adds the specified selected item in the object to the object's selection. If the object supports multiple selections, the specified item is added to any existing selection, otherwise it replaces any existing selection in the object. If the specified item is already selected, this method has no effect.
Constructs an VerifyError with the specified detail message.
Put the value of the named short field into the persistent field.
Adds a KeyEventPostProcessor to this KeyboardFocusManager's post- processor chain. After a KeyEvent has been dispatched to and handled by its target, KeyboardFocusManager will request that each KeyEventPostProcessor perform any necessary post-processing as part of the KeyEvent's final resolution. KeyEventPostProcessors will be notified in the order in which they were added; the current KeyboardFocusManager will be notified last. Notifications will halt as soon as one KeyEventPostProcessor returns true from its postProcessKeyEvent method. There is no limit to the the total number of KeyEventPostProcessors that can be added, nor to the number of times that a particular KeyEventPostProcessor instance can be added. If a null post-processor is specified, no action is taken and no exception is thrown. In a multithreaded application, KeyEventPostProcessor behaves the same as other AWT listeners. See AWT Threading Issues for more details.
String representation of the ObjectName for the ClassLoadingMXBean.
Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier. The following Unicode characters are ignorable in a Java identifier or a Unicode identifier: ISO control characters that are not whitespace '\u0000' through '\u0008' '\u000E' through '\u001B' '\u007F' through '\u009F' all characters that have the FORMAT general category value Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isIdentifierIgnorable(int) method.
Utility routine to check if the InetAddress is an IP multicast address. IP multicast address is a Class D address i.e first four bits of the address are 1110.
Returns a list of all media that have encountered an error.
Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. Note that since the first argument is treated as an unsigned value, no leading sign character is printed. If the magnitude is zero, it is represented by a single zero character '0' ('\u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The behavior of radixes and the characters used as digits are the same as toString.
Creates a PathIterator for the outline of this Area object. This Area object is unchanged.
Sets the background color of this object. (For transparency, see isOpaque.)
Constructs a string builder with no characters in it and an initial capacity specified by the capacity argument.
Requests, on behalf of the ImageConsumer, that the ImageProducer attempt to resend the image data one more time in TOPDOWNLEFTRIGHT order so that higher quality conversion algorithms which depend on receiving pixels in order can be used to produce a better output version of the image. The ImageProducer is free to ignore this call if it cannot resend the data in that order. If the data can be resent, the ImageProducer should respond by executing the following minimum set of ImageConsumer method calls: ic.setHints(TOPDOWNLEFTRIGHT | < otherhints >); ic.setPixels(...); // As many times as needed ic.imageComplete();
Returns the minimum size of this container. If the minimum size has not been set explicitly by Component.setMinimumSize(Dimension) and this Container has a non-null LayoutManager, then LayoutManager.minimumLayoutSize(Container) is used to calculate the minimum size. Note: some implementations may cache the value returned from the LayoutManager. Implementations that cache need not invoke minimumLayoutSize on the LayoutManager every time this method is invoked, rather the LayoutManager will only be queried after the Container becomes invalid.
"Constant for the ""Cyrillic Extended-B"" Unicode character block."
Returns the size, in pixels, of the space that a tray icon will occupy in the system tray. Developers may use this methods to acquire the preferred size for the image property of a tray icon before it is created. For convenience, there is a similar method TrayIcon.getSize() in the TrayIcon class.
Constructs an AdjustmentEvent object with the specified Adjustable source, event type, adjustment type, and value. This method throws an IllegalArgumentException if source is null.
Returns ex -1. Note that for values of x near 0, the exact sum of expm1(x) + 1 is much closer to the true result of ex than exp(x). Special cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is negative infinity, then the result is -1.0. If the argument is zero, then the result is a zero with the same sign as the argument. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic. The result of expm1 for any finite input must be greater than or equal to -1.0. Note that once the exact result of ex - 1 is within 1/2 ulp of the limit value -1, -1.0 should be returned.
Returns a string representing the state of this MenuComponent. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between implementations. The returned string may be empty but may not be null.
Counts the number of stack frames in this thread. The thread must be suspended.
Returns the value of the specified number as an int, which may involve rounding or truncation.
The Myanmar range with the Myanmar Shan digits.
Skips over and discards n bytes of data from the input stream. The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0. If n is negative, the method will try to skip backwards. In case the backing file does not support backward skip at its current position, an IOException is thrown. The actual number of bytes skipped is returned. If it skips forwards, it returns a positive value. If it skips backwards, it returns a negative value. This method may skip more bytes than what are remaining in the backing file. This produces no exception and the number of bytes skipped may include some number of bytes that were beyond the EOF of the backing file. Attempting to read from the stream after skipping past the end will result in -1 indicating the end of the file.
Identifies the ORIYA range and decimal base.
Return true if the integer argument includes the native modifier, false otherwise.
ICC Profile Tag Signature: 'clro'.
remove a service
Writes the specified byte (the low eight bits of the argument b) to the underlying output stream. If no exception is thrown, the counter written is incremented by 1. Implements the write method of OutputStream.
Returns an estimate of the memory usage of this memory pool. This method returns null if this memory pool is not valid (i.e. no longer exists). This method requests the Java virtual machine to make a best-effort estimate of the current memory usage of this memory pool. For some memory pools, this method may be an expensive operation that requires some computation to determine the estimate. An implementation should document when this is the case. This method is designed for use in monitoring system memory usage and detecting low memory condition. MBeanServer access: The mapped type of MemoryUsage is CompositeData with attributes as specified in MemoryUsage.
"Constant for the ""IPA Extensions"" Unicode character block."
Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input. An ArrayIndexOutOfBoundsException might be thrown if the coordinates are not in bounds.
"Weak bidirectional character type ""EN"" in the Unicode specification."
Returns a new float initialized to the value represented by the specified String, as performed by the valueOf method of class Float.
Fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if the given event's old and new values are equal and non-null.
accept the Drag.
See the general contract of the readLong method of DataInput. Bytes for this operation are read from the contained input stream.
Constructs a NoSuchMethodError with no detail message.
Returns the clone of page with its settings adjusted to be compatible with the current printer of this PrinterJob. For example, the returned PageFormat could have its imageable area adjusted to fit within the physical area of the paper that is used by the current printer.
Updates this canvas. This method is called in response to a call to repaint. The canvas is first cleared by filling it with the background color, and then completely redrawn by calling this canvas's paint method. Note: applications that override this method should either call super.update(g) or incorporate the functionality described above into their own code.
Creates a new class loader using the specified parent class loader for delegation. If there is a security manager, its checkCreateClassLoader method is invoked. This may result in a security exception.
Returns an array of all the window state listeners registered on this window.
Text antialiasing hint value -- request that text be displayed optimised for an LCD display with subpixel organisation from display top to bottom of R,G,B such that the vertical subpixel resolution is three times that of the full pixel vertical resolution (VRGB). Vertical orientation is very uncommon and probably mainly useful for a physically rotated display. Selecting this hint for displays with one of the other LCD subpixel configurations will likely result in unfocused text. See VALUE_TEXT_ANTIALIAS_LCD_HRGB, for more information on when this hint is applied.
Compares the two specified double values. The sign of the integer value returned is the same as that of the integer that would be returned by the call: new Double(d1).compareTo(new Double(d2))
Returns the char value in this sequence at the specified index. The first char value is at index 0, the next at index 1, and so on, as in array indexing. The index argument must be greater than or equal to 0, and less than the length of this sequence. If the char value specified by the index is a surrogate, the surrogate value is returned.
Used to get a gamma value or TRC for the red component.
Returns the height of the framing rectangle in double precision.
"Adds a PropertyChangeListener to the listener list. The listener is registered for all bound properties of this class, including the following: this Window's font (""font"") this Window's background color (""background"") this Window's foreground color (""foreground"") this Window's focusability (""focusable"") this Window's focus traversal keys enabled state (""focusTraversalKeysEnabled"") this Window's Set of FORWARD_TRAVERSAL_KEYS (""forwardFocusTraversalKeys"") this Window's Set of BACKWARD_TRAVERSAL_KEYS (""backwardFocusTraversalKeys"") this Window's Set of UP_CYCLE_TRAVERSAL_KEYS (""upCycleFocusTraversalKeys"") this Window's Set of DOWN_CYCLE_TRAVERSAL_KEYS (""downCycleFocusTraversalKeys"") this Window's focus traversal policy (""focusTraversalPolicy"") this Window's focusable Window state (""focusableWindowState"") this Window's always-on-top state(""alwaysOnTop"") Note that if this Window is inheriting a bound property, then no event will be fired in response to a change in the inherited property. If listener is null, no exception is thrown and no action is performed."
Specifies the print quality for pages using these attributes. Not specifying the property is equivalent to specifying PrintQualityType.NORMAL.
Sets a pixel in the DataBuffer using an int array of samples for input. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.
Returns the fully qualified name of the class containing the execution point represented by this stack trace element.
Scrolls to the specified position within the child component. A call to this method is only valid if the scroll pane contains a child and the specified position is within legal scrolling bounds of the child. Specifying a position outside of the legal scrolling bounds of the child will scroll to the closest legal position. Legal bounds are defined to be the rectangle: x = 0, y = 0, width = (child width - view port width), height = (child height - view port height). This is a convenience method which interfaces with the Adjustable objects which represent the state of the scrollbars.
Invoked when a mouse button has been pressed on a component.
An alias for ISO_B2.
Indicates whether or not this FontRenderContext object measures text in a transformed render context.
Combine the components for the delivered int pixels into the accumulation arrays and send on any averaged data for rows of pixels that are complete. If the correct hints were not specified in the setHints call then relay the work to our superclass which is capable of scaling pixels regardless of the delivery hints. Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being filtered. Developers using this class to filter pixels from an image should avoid calling this method directly since that operation could interfere with the filtering operation.
Method invoked when the given thread terminates due to the given uncaught exception. Any exception thrown by this method will be ignored by the Java Virtual Machine.
"Represents an ""edit"" action."
Returns the value of the indexed component in the specified array object. The value is automatically wrapped in an object if it has a primitive type.
Releases system resources currently consumed by this BufferStrategy and removes it from the associated Component. After invoking this method, getBufferStrategy will return null. Trying to use a BufferStrategy after it has been disposed will result in undefined behavior.
A direct method handle reference kind, as defined in the table above.
Computes an arbitrary rectangular region of the RenderedImage and copies it into a caller-supplied WritableRaster. The region to be computed is determined from the bounds of the supplied WritableRaster. The supplied WritableRaster must have a SampleModel that is compatible with this image. If raster is null, an appropriate WritableRaster is created.
Constant for the Begin key.
Transfers the focus to the next component, as though this Component were the focus owner.
Returns the maximum dimensions for this layout given the components in the specified target container.
Returns the class with the given binary name if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that binary name. Otherwise null is returned.
Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at the last marked position so that subsequent reads re-read the same bytes. The readlimit argument tells this input stream to allow that many bytes to be read before the mark position gets invalidated. This method simply performs in.mark(readlimit).
The move cursor type.
Returns true if this executable is a synthetic construct; returns false otherwise.
"Constant for the ""Old Italic"" Unicode character block."
Returns the greater of two int values as if by calling Math.max.
Returns the start Point2D of this Line2D.
Calls painter to render the pages. The pages in the document to be printed by this PrinterJob are rendered by the Printable object, painter. The PageFormat for each page is the default page format.
Returns the value of this Long as a long value.
Returns the bounding rectangle of the current clipping area.
Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)
The color rendered for the window-title background of inactive windows.
Returns the thickness of the underline.
Closes the stream. This is done by flushing the stream and then closing the underlying output stream.
Write a portion of a string.
Constructs a SinglePixelPackedSampleModel with bitMasks.length bands. Each sample is stored in a data array element in the position of its corresponding bit mask. Each bit mask must be contiguous and masks must not overlap. Bit masks exceeding data type capacity are truncated.
Constructs an instance of AWTException with the specified detail message. A detail message is an instance of String that describes this particular exception.
Constructs and initializes a Rectangle2D from the specified double coordinates.
Gets the layout manager for this container.
Constructs a newly allocated Integer object that represents the specified int value.
Creates this toolkit's implementation of FileDialog using the specified peer interface.
Returns the hit for the next caret to the right (bottom); if there is no such hit, returns null. If the hit character index is out of bounds, an IllegalArgumentException is thrown.
"Returns the name of the cracked method handle's underlying member. This is ""<init>"" if the underlying member was a constructor, else it is a simple method name or field name."
"General category ""Zs"" in the Unicode specification."
Returns the angular extent of the arc.
Creates a new popup menu with the specified name.
The int value representing the public modifier.
Returns the DragGestureEvent that initially triggered the drag.
Tests if a specified file should be included in a file list.
The X coordinate of the start point of the cubic curve segment.
Determines whether the RectangularShape is empty. When the RectangularShape is empty, it encloses no area.
Returns the current capacity. The capacity is the amount of storage available for newly inserted characters, beyond which an allocation will occur.
Prints out a list, starting at the specified indentation, to the specified print writer. The immediate children of the container are printed with an indentation of indent+1. The children of those children are printed at indent+2 and so on.
The number of bytes used to represent a int value in two's complement binary form.
Concatenates the current Graphics2D Transform with a translated rotation transform. Subsequent rendering is transformed by a transform which is constructed by translating to the specified location, rotating by the specified radians, and translating back by the same amount as the original translation. This is equivalent to the following sequence of calls: translate(x, y); rotate(theta); translate(-x, -y); Rotating with a positive angle theta rotates points on the positive x axis toward the positive y axis.
Skips characters.
Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods: Object.wait with no timeout Thread.join with no timeout LockSupport.park A thread in the waiting state is waiting for another thread to perform a particular action. For example, a thread that has called Object.wait() on an object is waiting for another thread to call Object.notify() or Object.notifyAll() on that object. A thread that has called Thread.join() is waiting for a specified thread to terminate.
"Constant for the ""Cyrillic Extended-A"" Unicode character block."
Draws as much of the specified image as is currently available. The image is drawn with its top-left corner at (x, y) in this graphics context's coordinate space. Transparent pixels in the image do not affect whatever pixels are already there. This method returns immediately in all cases, even if the complete image has not yet been loaded, and it has not been dithered and converted for the current output device. If the image has completely loaded and its pixels are no longer being changed, then drawImage returns true. Otherwise, drawImage returns false and as more of the image becomes available or it is time to draw another frame of animation, the process that loads the image notifies the specified image observer.
Constructs a new RoundRectangle2D, initialized to location (0.0, 0.0), size (0.0, 0.0), and corner arcs of radius 0.0.
Makes this Dialog displayable by connecting it to a native screen resource. Making a dialog displayable will cause any of its children to be made displayable. This method is called internally by the toolkit and should not be called directly by programs.
Specified that the character argument starts a single-line comment. All characters from the comment character to the end of the line are ignored by this stream tokenizer. Any other attribute settings for the specified character are cleared.
Determines if the specified character is ISO-LATIN-1 white space. This method returns true for the following five characters only: '\t' U+0009 HORIZONTAL TABULATION '\n' U+000A NEW LINE '\f' U+000C FORM FEED '\r' U+000D CARRIAGE RETURN ' ' U+0020 SPACE
Adds a Short to the list of parameters.
Returns a Shape enclosing the logical selection in the specified range, extended to the natural bounds of this TextLayout. This method is a convenience overload of getLogicalHighlightShape that uses the natural bounds of this TextLayout.
Determines if the specified character (Unicode code point) is a lowercase character. A character is lowercase if its general category type, provided by getType(codePoint), is LOWERCASE_LETTER, or it has contributory property Other_Lowercase as defined by the Unicode Standard. The following are examples of lowercase characters: a b c d e f g h i j k l m n o p q r s t u v w x y z '\u00DF' '\u00E0' '\u00E1' '\u00E2' '\u00E3' '\u00E4' '\u00E5' '\u00E6' '\u00E7' '\u00E8' '\u00E9' '\u00EA' '\u00EB' '\u00EC' '\u00ED' '\u00EE' '\u00EF' '\u00F0' '\u00F1' '\u00F2' '\u00F3' '\u00F4' '\u00F5' '\u00F6' '\u00F8' '\u00F9' '\u00FA' '\u00FB' '\u00FC' '\u00FD' '\u00FE' '\u00FF' Many other Unicode characters are lowercase too.
Sets the location of this point to the specified double coordinates. The double values will be rounded to integer values. Any number smaller than Integer.MIN_VALUE will be reset to MIN_VALUE, and any number larger than Integer.MAX_VALUE will be reset to MAX_VALUE.
The MultipleDocumentHandlingType instance to use for specifying that the job should be divided into separate, uncollated copies.
Returns whether this object can accept focus or not.
Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard.
Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard. The remainder value is mathematically equal to f1 - f2 × n, where n is the mathematical integer closest to the exact mathematical value of the quotient f1/f2, and if two mathematical integers are equally close to f1/f2, then n is the integer that is even. If the remainder is zero, its sign is the same as the sign of the first argument. Special cases: If either argument is NaN, or the first argument is infinite, or the second argument is positive zero or negative zero, then the result is NaN. If the first argument is finite and the second argument is infinite, then the result is the same as the first argument.
Constant for the inverted exclamation mark key.
Returns the advance width of the specified character in this Font. The advance is the distance from the leftmost point to the rightmost point on the character's baseline. Note that the advance of a String is not necessarily the sum of the advances of its characters. This method doesn't validate the specified character to be a valid Unicode code point. The caller must validate the character value using Character.isValidCodePoint if necessary.
Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.
Returns the number of parameters (not including source images).
Returns an image which gets pixel data from the specified URL. The pixel data referenced by the specified URL must be in one of the following formats: GIF, JPEG or PNG. The underlying toolkit attempts to resolve multiple requests with the same URL to the same returned Image. Since the mechanism required to facilitate this sharing of Image objects may continue to hold onto images that are no longer in use for an indefinite period of time, developers are encouraged to implement their own caching of images by using the createImage variant wherever available. If the image data stored at the specified URL changes, the Image object returned from this method may still contain stale information which was fetched from the URL after a prior call. Previously loaded image data can be manually discarded by calling the flush method on the returned Image. This method first checks if there is a security manager installed. If so, the method calls the security manager's checkPermission method with the url.openConnection().getPermission() permission to ensure that the access to the image is allowed. For compatibility with pre-1.2 security managers, if the access is denied with FilePermission or SocketPermission, the method throws the SecurityException if the corresponding 1.1-style SecurityManager.checkXXX method also denies permission.
Specifies the maximum value the user can specify as the last page to be printed for jobs using these attributes. This attribute cannot be modified by, and is not subject to any limitations of, the implementation or the target printer.
Transforms a color value assumed to be in this ColorSpace into a value in the default CS_sRGB color space. This method transforms color values using algorithms designed to produce the best perceptual match between input and output colors. In order to do colorimetric conversion of color values, you should use the toCIEXYZ method of this color space to first convert from the input color space to the CS_CIEXYZ color space, and then use the fromCIEXYZ method of the CS_sRGB color space to convert from CS_CIEXYZ to the output color space. See toCIEXYZ and fromCIEXYZ for further information.
The last number in the range of ids used for action events.
Prints a listing of this component to the specified output stream.
"Create a check box menu item with the specified label. The item's state is initially set to ""off."""
Invoked by BeanContextServices, this method requests an instance of a service from this BeanContextServiceProvider.
Records the Expression so that the Encoder will produce the actual output when the stream is flushed. This method should only be invoked within the context of initializing a persistence delegate or setting up an encoder to read from a resource bundle. For more information about using resource bundles with the XMLEncoder, see http://java.sun.com/products/jfc/tsc/articles/persistence4/#i18n
Appends the specified character sequence to this output stream. An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation out.print(csq.toString()) Depending on the specification of toString for the character sequence csq, the entire sequence may not be appended. For instance, invoking then toString method of a character buffer will return a subsequence whose content depends upon the buffer's position and limit.
Parses the string argument as a signed short in the radix specified by the second argument. The characters in the string must all be digits, of the specified radix (as determined by whether Character.digit(char, int) returns a nonnegative value) except that the first character may be an ASCII minus sign '-' ('\u002D') to indicate a negative value or an ASCII plus sign '+' ('\u002B') to indicate a positive value. The resulting short value is returned. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX. Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign '-' ('\u002D') or plus sign '+' ('\u002B') provided that the string is longer than length 1. The value represented by the string is not a value of type short.
Override the dimensions of the source image and pass the dimensions of the new scaled size to the ImageConsumer. Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being filtered. Developers using this class to filter pixels from an image should avoid calling this method directly since that operation could interfere with the filtering operation.
This method returns the DragSource this DragGestureRecognizer will use in order to process the Drag and Drop operation.
Called by the AWT to notify the KeyboardFocusManager that it should delay dispatching of KeyEvents until the specified Component becomes the focus owner. If client code requests a focus change, and the AWT determines that this request might be granted by the native windowing system, then the AWT will call this method. It is the responsibility of the KeyboardFocusManager to delay dispatching of KeyEvents with timestamps later than the specified time stamp until the specified Component receives a FOCUS_GAINED event, or the AWT cancels the delay request by invoking dequeueKeyEvents or discardKeyEvents.
"The ""mouse pressed"" event. This MouseEvent occurs when a mouse button is pushed down."
Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element. An ArrayIndexOutOfBoundsException might be thrown if the coordinates are not in bounds.
AlphaComposite object that implements the opaque SRC_OVER rule with an alpha of 1.0f.
Adds a point to the path by moving to the specified coordinates specified in double precision.
Returns the default screen GraphicsDevice.
The array index for the controlLtHighlight system color.
Get the AccessibleAction associated with this object. In the implementation of the Java Accessibility API for this class, return this object, which is responsible for implementing the AccessibleAction interface on behalf of itself.
Constructs a WritableRaster with the given SampleModel, DataBuffer, and parent. aRegion specifies the bounding rectangle of the new Raster. When translated into the base Raster's coordinate system, aRegion must be contained by the base Raster. (The base Raster is the Raster's ancestor which has no parent.) sampleModelTranslate specifies the sampleModelTranslateX and sampleModelTranslateY values of the new Raster. Note that this constructor should generally be called by other constructors or create methods, it should not be used directly.
The user has pressed a normal key.
Gets the minimum value of the adjustable object.
This method is invoked to signify that the Drag and Drop operation is complete. The getDropSuccess() method of the DragSourceDropEvent can be used to determine the termination state. The getDropAction() method returns the operation that the drop site selected to apply to the Drop operation. Once this method is complete, the current DragSourceContext and associated resources become invalid.
The user has released a normal key.
Returns the object to which this event handler will send a message.
Sets the FlavorMap associated with this DropTarget.
Returns the managed bean for the memory system of the Java virtual machine.
Asks the current input method to reconvert text from the current client component. The input method obtains the text to be reconverted from the client component using the InputMethodRequests.getSelectedText method. The other InputMethodRequests methods must be prepared to deal with further information requests by the input method. The composed and/or committed text will be sent to the client component as a sequence of InputMethodEvents. If the input method cannot reconvert the given text, the text is returned as committed text in an InputMethodEvent.
Returns the Point where Windows should be centered. It is recommended that centered Windows be checked to ensure they fit within the available display area using getMaximumWindowBounds().
ICC Profile Constant: XYZNumber X.
Tests if a specified coordinate is inside the boundary of this Line2D. This method is required to implement the Shape interface, but in the case of Line2D objects it always returns false since a line contains no area.
Sets this transform to a translation transformation. The matrix representing this transform becomes: [ 1 0 tx ] [ 0 1 ty ] [ 0 0 1 ]
Creates a TextHitInfo at the specified offset, associated with the character before the offset.
"Constant for the "")"" key."
Determines the minimum size of the container argument using this grid layout. The minimum width of a grid layout is the largest minimum width of all of the components in the container times the number of columns, plus the horizontal padding times the number of columns minus one, plus the left and right insets of the target container. The minimum height of a grid layout is the largest minimum height of all of the components in the container times the number of rows, plus the vertical padding times the number of rows minus one, plus the top and bottom insets of the target container.
Gets the offset for band b of pixel (x,y). A sample of band b can be retrieved from a DataBuffer data with a ComponentSampleModel csm as data.getElem(csm.getOffset(x, y, b));
Returns the ScrollPaneAdjustable object which represents the state of the vertical scrollbar. The declared return type of this method is Adjustable to maintain backward compatibility.
Removes the current thread's value for this thread-local variable. If this thread-local variable is subsequently read by the current thread, its value will be reinitialized by invoking its initialValue() method, unless its value is set by the current thread in the interim. This may result in multiple invocations of the initialValue method in the current thread.
